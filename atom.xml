<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-26T14:59:51.155Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HuFei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2017/04/26/git/"/>
    <id>http://yoursite.com/2017/04/26/git/</id>
    <published>2017-04-26T02:36:16.000Z</published>
    <updated>2017-07-26T14:59:51.155Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h2 id="集中式和分布式版本控制系统"><a href="#集中式和分布式版本控制系统" class="headerlink" title="集中式和分布式版本控制系统"></a>集中式和分布式版本控制系统</h2><ul>
<li>集中式版本控制系统的版本库是集中存放在中央服务器的，每次操作都要从中央服务器获取最新的版本，改动后将最新的版本推送到中央服务器。这种系统需要联网才能操作。集中式版本控制系统的代表有CVS,SVN等。</li>
<li>分布式版本控制系统的不需要中央服务器，每个客户端都有一个完整的版本库。但在实际中，为了数据交换的方便，分布式版本控制系统通常也有一台充当“中央服务器”的电脑。和集中式不同的时，这台电脑的作用主要是为了交换数据，而不是存放版本。分布式版本控制系统代表Git。</li>
</ul>
<h2 id="git准备阶段"><a href="#git准备阶段" class="headerlink" title="git准备阶段"></a>git准备阶段</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><ul>
<li>下载地址<a href="https://git-scm.com/downloads。" target="_blank" rel="external">https://git-scm.com/downloads。</a></li>
<li>git安装时选择在window下使用git并且在window下使用linux命令<br>安装完成后查看git版本号确定是否安装成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="查看git配置信息"><a href="#查看git配置信息" class="headerlink" title="查看git配置信息"></a>查看git配置信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
<h4 id="配置账户名和邮箱"><a href="#配置账户名和邮箱" class="headerlink" title="配置账户名和邮箱"></a>配置账户名和邮箱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name github账户名</div><div class="line">git config --global user.email github邮箱</div></pre></td></tr></table></figure>
<p>可以合并一起写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global githufei 460284524@qq.com</div></pre></td></tr></table></figure></p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>进入文件夹，”shift+右键“打开cmd命令窗口或者Git bash。也可以通过cd（change Directory的缩写）命令切换当前路径。</p>
<h3 id="创建目录和文件"><a href="#创建目录和文件" class="headerlink" title="创建目录和文件"></a>创建目录和文件</h3><ul>
<li><p>创建一个文件夹，如mygit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir mygit</div></pre></td></tr></table></figure>
</li>
<li><p>进入创建的这个文件夹mygit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd mygit</div></pre></td></tr></table></figure>
</li>
<li><p>touch创建文件，可以创建以.开头的文件，如touch test.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch 文件名</div><div class="line">touch test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>编辑文件内容：</p>
<ul>
<li><p>vim模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. `vi 文件名`，进入vim编辑模式`vi test.txt`</div><div class="line">2. i键或insert键 插入内容</div><div class="line">3.  esc键 + `:wq` 保存退出</div></pre></td></tr></table></figure>
</li>
<li><p>echo命令：把hello保存到test.txt中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo hello &gt; test.txt</div><div class="line">“&gt;” 表示清空并写入内容</div><div class="line">“&gt;&gt;”表示在原来文件的末尾追加内容</div></pre></td></tr></table></figure>
</li>
<li><p>用记事本手动编辑保存</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>vim模式输入内容：<br>把光标定位在第一行的第一个字符，<br>按i进入插入模式<br>输入想写的内容<br>输入完成后按esc退出编辑模式<br>输入:wq退出编辑模式<br>如果不想输入内容直接按:q!退出编辑器</p>
</blockquote>
<ul>
<li><p>cat命令查看文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat 文件名</div><div class="line">cat test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>删除文件夹或文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf 文件/文件夹名</div><div class="line">rm -rf mygit</div></pre></td></tr></table></figure>
</li>
<li><p>ls命令列出当前目录下所有的文件，不包括隐藏文件</p>
</li>
<li><p>ls -al命令窗口当前目录下所有文件，包括隐藏文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line">ls -al</div><div class="line">ls -a</div></pre></td></tr></table></figure>
</li>
<li><p>git bash清除屏幕</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear</div></pre></td></tr></table></figure>
</li>
<li><p>导出命令历史到文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">history &gt; 1.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul>
<li>初始化git，把这个目录变成Git可以管理的仓库</li>
<li><p>初始化后git bash窗口文件夹名后出现master，在mygit文件夹中会出现隐藏文件夹.git，这个目录是Git跟踪管理版本库用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>如果不想再让文件夹被git管理，使用命令删除.git文件夹即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf .git</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p>本地仓库是由git维护的三棵“树型(有层级关系)区域”组成。</p>
<ul>
<li><strong>工作区</strong>：<br>对应你的物理目录，树型结构，也就是编辑代码的地方；</li>
<li><strong>暂存区</strong>：<br>工作区和历史提交的中间缓存，代表需要提交的工作状态，维护虚拟树型结构,临时保存你的改动；</li>
<li><strong>历史区（版本库）</strong>：<br>树型结构，历史仓库，指向你最近一次提交后的结果。<br>大部分时候是先提交到暂存区中，再提交到历史里面。也可以从历史记录里面检出数据到暂存区和工作区。<br><img src="https://ooo.0o0.ooo/2017/07/01/5957b3daf3b73.jpg" alt=""></li>
</ul>
<h2 id="Git管理版本"><a href="#Git管理版本" class="headerlink" title="Git管理版本"></a>Git管理版本</h2><h3 id="查看git状态"><a href="#查看git状态" class="headerlink" title="查看git状态"></a>查看git状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<p>文件修改后通过git status查看当前状态</p>
<h3 id="从工作区添加文件到暂存区"><a href="#从工作区添加文件到暂存区" class="headerlink" title="从工作区添加文件到暂存区"></a>从工作区添加文件到暂存区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add 文件名 </div><div class="line">git add 首字母+tab  快捷输入文件名</div><div class="line">git add . 把所有的文件加入git暂存区</div><div class="line">git add -A 把所有的文件加入git暂存区</div></pre></td></tr></table></figure>
<blockquote>
<p>工作区的文件在git bash是红色的，暂存区的文件是绿色的。</p>
</blockquote>
<h3 id="从暂存区提交文件到历史区"><a href="#从暂存区提交文件到历史区" class="headerlink" title="从暂存区提交文件到历史区"></a>从暂存区提交文件到历史区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &apos;注释内容&apos;</div></pre></td></tr></table></figure>
<ul>
<li>添加和提交可以合并使用一个命令，但第一次提交不能使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a -m &apos;信息&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>产生冲突需要手动决绝冲突，删掉不需要的内容，提交最终的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rebase cherry-pick</div></pre></td></tr></table></figure></p>
<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
<h2 id="不同区文件比较"><a href="#不同区文件比较" class="headerlink" title="不同区文件比较"></a>不同区文件比较</h2><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<h4 id="暂存区和历史区"><a href="#暂存区和历史区" class="headerlink" title="暂存区和历史区"></a>暂存区和历史区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --cached</div></pre></td></tr></table></figure>
<h4 id="工作区和版本库"><a href="#工作区和版本库" class="headerlink" title="工作区和版本库"></a>工作区和版本库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff master</div></pre></td></tr></table></figure>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><h3 id="从暂存区撤销回git-add的内容"><a href="#从暂存区撤销回git-add的内容" class="headerlink" title="从暂存区撤销回git add的内容"></a>从暂存区撤销回git add的内容</h3><ul>
<li>如误操作将工作区中不准确的内容推送到了暂存区，可以移除本次向暂存区的推送，让暂存区回到同步前的正确状态。</li>
<li><p>移除某一个文件的同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD 文件名</div></pre></td></tr></table></figure>
</li>
<li><p>通过版本id恢复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset hard commit_id</div></pre></td></tr></table></figure>
</li>
<li><p>撤回所有文件的同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD .</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><h3 id="从历史区恢复文件到工作区"><a href="#从历史区恢复文件到工作区" class="headerlink" title="从历史区恢复文件到工作区"></a>从历史区恢复文件到工作区</h3><ul>
<li>如工作区出错，或工作区文件丢失，可以从历史区恢复上次提交的正确内容或找回文件</li>
<li><p>先从缓存区恢复，如果缓存区无内容，可以从历史区域恢复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout &quot;文件名&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>恢复某个版本文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout commit_id filename 某个文件</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><ul>
<li><p>将工作区，暂存区，历史区用同一个版本全部覆盖掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard 版本号</div></pre></td></tr></table></figure>
</li>
<li><p>查看回滚前的版本号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch dev</div></pre></td></tr></table></figure>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout dev</div></pre></td></tr></table></figure>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev</div></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge dev</div></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d dev</div></pre></td></tr></table></figure>
<h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><ul>
<li>初始化，一个目录只做一次</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<ul>
<li>新建一个.gitignore文件，里面写上忽略的内容，如webstorm生成的.idea文件夹，安装node模块生成的node_modules文件夹，每次同步不会同步忽略的文件和目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .gitignore</div></pre></td></tr></table></figure>
<ul>
<li>创建需要提交的文件（空文件夹不会被提交.gitkeep）</li>
<li><p>添加到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加到历史区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m&apos;xxx&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="链接远程仓库"><a href="#链接远程仓库" class="headerlink" title="链接远程仓库"></a>链接远程仓库</h3><p>打开Github，新建一个仓库(repository)，在quick setup下有个网站，如<code>https://github.com/githufei/mygit.git</code>。别名代表了这个仓库，地址也代表了这个仓库。关联后同步的内容就会添加到这个仓库中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add 别名(origin) 地址</div><div class="line">git remote -v 查看关联的仓库</div><div class="line">git remote rm 别名     可以删除链接</div></pre></td></tr></table></figure>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h3 id="发布github静态页"><a href="#发布github静态页" class="headerlink" title="发布github静态页"></a>发布github静态页</h3><ul>
<li>必须要有一个固定的分支 (gh-pages)</li>
<li>需要将内容发送到这个分支上</li>
<li>在setting中可以免费送你一个网址<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b gh-pages</div><div class="line">touch index.html</div><div class="line">git add .</div><div class="line">git commit -m&apos;addHtml&apos;</div><div class="line">git push origin gh-pages</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>克隆一次，克隆下来默认会赠送一个地址，可以在这个地址上使用git pull 不停的更新数据到本地。在更新数据时如果遇到冲突不能拉取，先提交到历史区，然后删除冲突文件，再次拉取即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone 别人的地址 别名(文件夹名)</div><div class="line">git pull origin master</div></pre></td></tr></table></figure></p>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><ul>
<li>可以把别人的项目拷贝一份变成自己的（原作者更新代码，这边fork下来的不受影响）</li>
</ul>
<h3 id="pull-request"><a href="#pull-request" class="headerlink" title="pull request"></a>pull request</h3><ul>
<li>可以向项目的原作者发送合并请求（必须是fork过来的才可以发送合并请求）</li>
<li>原作者同意合并请求后将把请求者的代码合并到原作者的内容中</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;集中式和分布式版本控制系统&quot;&gt;&lt;a href=&quot;#集中式和分布式版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;集中式和分布式版本控制系统&quot;&gt;&lt;/a&gt;集中式和分布式版本控制系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;集中式版本控制
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建GitHub博客</title>
    <link href="http://yoursite.com/2017/04/25/%E5%9F%BA%E4%BA%8EGitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/04/25/基于GitHub搭建博客/</id>
    <published>2017-04-25T06:36:16.000Z</published>
    <updated>2017-07-26T08:55:16.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ul>
<li>Node.js 的安装和准备 </li>
<li>Git的安装和准备 </li>
<li>gitHub账户的配置</li>
</ul>
<h3 id="Node-js-的安装和准备"><a href="#Node-js-的安装和准备" class="headerlink" title="Node.js 的安装和准备"></a>Node.js 的安装和准备</h3><ul>
<li>1.下载node.js安装文件：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li>2.cmd，打开命令行界面,查看安装版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<h3 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h3><ul>
<li>下载Git安装文件：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></li>
<li>打开命令行输入,检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
<h3 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h3><ul>
<li>Github注册：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>创建代码库：</li>
<li>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：</div><div class="line">比如我的github名称是githufei,</div><div class="line">这里你就填 githufei.github.io</div></pre></td></tr></table></figure>
<ul>
<li>代码库设置:Setting<ul>
<li>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages</li>
<li>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面</li>
</ul>
</li>
</ul>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li>首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:    进入E盘</div><div class="line">cd Hexo 进入Hexo文件夹</div></pre></td></tr></table></figure>
<ul>
<li>安装HEXO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入</p>
<ul>
<li>保存hexo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -save</div></pre></td></tr></table></figure>
<ul>
<li>检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<h2 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a>hexo的相关配置</h2><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="首次体验Hexo"><a href="#首次体验Hexo" class="headerlink" title="首次体验Hexo"></a>首次体验Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   #生成</div><div class="line">hexo s   #启动服务</div></pre></td></tr></table></figure>
<p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<h2 id="怎样将Hexo与github-page-联系起来"><a href="#怎样将Hexo与github-page-联系起来" class="headerlink" title="怎样将Hexo与github page 联系起来"></a>怎样将Hexo与github page 联系起来</h2><p>大概分为以下几步</p>
<ul>
<li>配置git个人信息 </li>
<li>配置Deployment</li>
</ul>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><ul>
<li><p>1.设置Git的user name和email：(如果是第一次的话)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;githufei&quot;</div><div class="line">git config --global user.email &quot;460284524@qq.com&quot;</div></pre></td></tr></table></figure>
<p>查看自己的Git的user name和email:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　git config user.name</div><div class="line">　git config user.email</div></pre></td></tr></table></figure>
</li>
<li><p>2.检查是否已经有SSH Key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line">ls</div></pre></td></tr></table></figure>
</li>
<li><p>3.生成密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;460284524@qq.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">连续3个回车。如果不需要密码的话。</div><div class="line">最后得到了两个文件：id_rsa和id_rsa.pub。</div><div class="line">默认的存储路径是：C:\Users\Administrator\.ssh</div></pre></td></tr></table></figure>
<ul>
<li><p>4.添加密钥到ssh-agent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval &quot;$(ssh-agent -s)&quot;</div></pre></td></tr></table></figure>
<p>添加生成的 SSH key 到 ssh-agent。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
</li>
<li><p>5.登陆Github, 添加 ssh<br>把id_rsa.pub文件里的内容复制到SSH keys</p>
</li>
<li><p>6.测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>你将会看到：如果看到Hi后面是你的用户名，就说明成功了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果提示Are you sure you want to continue connecting (yes/no)?，输入yes</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><ul>
<li><p>配置_config.yml中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repository: git@github.com:githufei/githufei.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h2><ul>
<li><p>1.定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &apos;my-first-blog&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>hexo会帮我们在_posts下生成相关md文件,用马克飞象打开写文章就可以</p>
</li>
<li><p>文章编辑好之后，运行生成、部署命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g #在部署前先生成</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="踩坑提醒"><a href="#踩坑提醒" class="headerlink" title="踩坑提醒"></a>踩坑提醒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deloyer not found:git</div></pre></td></tr></table></figure>
<p> 这样的错误是需要装插件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建环境准备&quot;&gt;&lt;a href=&quot;#搭建环境准备&quot; class=&quot;headerlink&quot; title=&quot;搭建环境准备&quot;&gt;&lt;/a&gt;搭建环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js 的安装和准备 &lt;/li&gt;
&lt;li&gt;Git的安装和准备 &lt;/li&gt;
&lt;li&gt;git
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Web前端开发</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-27T06:28:47.160Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EJS</title>
    <link href="http://yoursite.com/2017/07/26/EJS/"/>
    <id>http://yoursite.com/2017/07/26/EJS/</id>
    <published>2017-07-26T15:25:05.000Z</published>
    <updated>2017-07-27T06:28:47.160Z</updated>
    
    <content type="html"><![CDATA[<p>ES6模板字符串中表示变量：<code>${JS代码}</code></p>
<p>EJS语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;% JS代码%&gt;</div><div class="line">&lt;%= 输出的内容%&gt;：是在HTML页面上真实展示的内容</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--3.造模板--&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">	给script标签加上type="text/template"表示的是html模板  加个id="boxTemplate"是为了方便后面第四部获取这个html模板用的</div><div class="line">	boxData：是你自己定义的数据的名字，它是模板数据  我们还需要把他跟AJAX获取出来的数据相关联</div><div class="line">	--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"boxTemplate"</span>&gt;</span><span class="xml"></span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">%$.each(boxData,function(index,item)&#123;%</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--处理li--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    			<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=item.a%</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=item.b%</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=item.c%</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		</div><div class="line">		<span class="tag">&lt;<span class="name">%&#125;)%</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    data=[&#123;a:"A",b:"B",c:'C'&#125;,&#123;a:"aa",b:"bb",c:'cc'&#125;,&#123;a:"aaa",b:"bbb",c:'ccc'&#125;];</div><div class="line">    var boxHTML=$("#boxTemplate").html();</div><div class="line">    var result=ejs.render(boxHTML,&#123;boxData:data&#125;);</div><div class="line">	console.log(result);</div><div class="line">	$("#box").html(result);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>ES6中使用模板字符串需要两个过程 :<br>1.定义模板</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> htmlStr=<span class="string">`&lt;p&gt;<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>&lt;/p&gt;`</span>;</div></pre></td></tr></table></figure>
<p>2.手动将模板放到指定元素中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".box"</span>).html(htmlStr);</div></pre></td></tr></table></figure>
<h2 id="EJS-四步曲"><a href="#EJS-四步曲" class="headerlink" title="EJS 四步曲"></a>EJS 四步曲</h2><ol>
<li>在HTML结构中定义容器，例如：<code>&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</code></li>
<li><p>通过AJAX动态获取data数据，如获取到的数据是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data=[&#123;<span class="attr">a</span>:<span class="string">"A"</span>,<span class="attr">b</span>:<span class="string">"B"</span>,<span class="attr">c</span>:<span class="string">"C"</span>&#125;,&#123;<span class="attr">a</span>:<span class="string">"aa"</span>,<span class="attr">b</span>:<span class="string">"bb"</span>,<span class="attr">c</span>:<span class="string">"cc"</span>&#125;,&#123;<span class="attr">a</span>:<span class="string">"aaa"</span>,<span class="attr">b</span>:<span class="string">"bbb"</span>,<span class="attr">c</span>:<span class="string">"ccc"</span>&#125;];</div></pre></td></tr></table></figure>
</li>
<li><p>造模板 搭建HTML结构构导入数据</p>
</li>
<li><p>通过ejs.render 将html结构，模板数据，data数据渲染出来。<br>格式：<br><code>ejs.render(模板的html结构,{模板数据:真实数据(一般都是通过AJAX获取出来的数据)})</code></p>
<p> 4-1. 获取HTML模板</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> boxHTML=$(<span class="string">"#boxTemplate"</span>).html();</div></pre></td></tr></table></figure>
<p> 4-2. ejs.render()</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result=ejs.render(boxHTML,&#123;<span class="attr">boxData</span>:data&#125;);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line">$(<span class="string">"#box"</span>).html(result);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6模板字符串中表示变量：&lt;code&gt;${JS代码}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;EJS语法:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;% JS代码%&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;%= 输出的内容%&amp;gt;：是在HTML页面上真实展示的内容&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--3.造模板--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	给script标签加上type=&quot;text/template&quot;表示的是html模板  加个id=&quot;boxTemplate&quot;是为了方便后面第四部获取这个html模板用的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	boxData：是你自己定义的数据的名字，它是模板数据  我们还需要把他跟AJAX获取出来的数据相关联&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/template&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;boxTemplate&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%$.each(boxData,function(index,item)&amp;#123;%&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--处理li--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=item.a%&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=item.b%&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%=item.c%&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;%&amp;#125;)%&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data=[&amp;#123;a:&quot;A&quot;,b:&quot;B&quot;,c:&#39;C&#39;&amp;#125;,&amp;#123;a:&quot;aa&quot;,b:&quot;bb&quot;,c:&#39;cc&#39;&amp;#125;,&amp;#123;a:&quot;aaa&quot;,b:&quot;bbb&quot;,c:&#39;ccc&#39;&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var boxHTML=$(&quot;#boxTemplate&quot;).html();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var result=ejs.render(boxHTML,&amp;#123;boxData:data&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	console.log(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(&quot;#box&quot;).html(result);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建GitHub博客(二)</title>
    <link href="http://yoursite.com/2017/04/25/%E5%9F%BA%E4%BA%8EGitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C/"/>
    <id>http://yoursite.com/2017/04/25/基于GitHub搭建博客-二/</id>
    <published>2017-04-25T08:52:30.000Z</published>
    <updated>2017-07-27T06:32:07.546Z</updated>
    
    <content type="html"><![CDATA[<p>上面使用Hexo搭建了GitHub博客,接下来进行博客的配置和个性化设置。</p>
<h2 id="博客的整体配置"><a href="#博客的整体配置" class="headerlink" title="博客的整体配置　　"></a>博客的整体配置　　</h2><p>博客的整体配置在<code>E:\Hexo\_config.yml</code>文件中进行。默认使用的主题是landscape，主题的配置在<code>E:\Hexo\themes\landscape\_config.yml</code>。主题的配置可以暂时不动，等到更换了自己满意的主题后再进行。先来说一下博客的整体配置，也就是打开<code>E:\Hexo\_config.yml</code>文件，更改里面的部分内容。简化起见，其他内容先不做更改，只更改#site下面的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: Github Blog #网站名称，会在标签页上显示</div><div class="line">subtitle: #副标题</div><div class="line">description: #网站描述</div><div class="line">author: HuFei #作者</div><div class="line">language: #语言</div><div class="line">timezone:</div></pre></td></tr></table></figure>
<p>更改完毕之后，启动本地预览，在浏览器中访问<code>localhost:4000</code>预览配置的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>如果满意的话，同步到Github上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div><div class="line">或者</div><div class="line">hexo d -g</div></pre></td></tr></table></figure></p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>关于主题的选择，可以到Hexo官方主题页面选择自己喜欢的主题，也可以到Github上搜索别人制作的主题。<br>使用Hexo更换主题，先使用克隆命令安装好主题，然后更改一下博客的配置文件<code>E:\Hexo\_config.yml</code>里面的主题名称就好了。</p>
<a id="more"></a>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>如安装yilia主题，在博客目录<code>E:\Hexo</code>下右键选择Git Bash,输入命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改博客目录<code>E:\Hexo\_config.yml</code>中的theme属性，将其设置为yilia。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yilia</div></pre></td></tr></table></figure>
<h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>主题的配置在themes文件夹下的<code>_config.yml</code>中进行.<br><code>E:\Hexo\themes\yilia\_config.yml</code>文件里面了。一般而言，主题的作者都会有对主题的相关介绍，看他介绍的修改就可以了。<br>提醒一点，主题中配置的头像等图片资源文件的路径是以source文件夹为路径的。</p>
<h3 id="将配置同步到Github"><a href="#将配置同步到Github" class="headerlink" title="将配置同步到Github"></a>将配置同步到Github</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git d -g</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上面使用Hexo搭建了GitHub博客,接下来进行博客的配置和个性化设置。&lt;/p&gt;
&lt;h2 id=&quot;博客的整体配置&quot;&gt;&lt;a href=&quot;#博客的整体配置&quot; class=&quot;headerlink&quot; title=&quot;博客的整体配置　　&quot;&gt;&lt;/a&gt;博客的整体配置　　&lt;/h2&gt;&lt;p&gt;博客的整体配置在&lt;code&gt;E:\Hexo\_config.yml&lt;/code&gt;文件中进行。默认使用的主题是landscape，主题的配置在&lt;code&gt;E:\Hexo\themes\landscape\_config.yml&lt;/code&gt;。主题的配置可以暂时不动，等到更换了自己满意的主题后再进行。先来说一下博客的整体配置，也就是打开&lt;code&gt;E:\Hexo\_config.yml&lt;/code&gt;文件，更改里面的部分内容。简化起见，其他内容先不做更改，只更改#site下面的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Site&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;title: Github Blog #网站名称，会在标签页上显示&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;subtitle: #副标题&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;description: #网站描述&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;author: HuFei #作者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;language: #语言&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;timezone:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更改完毕之后，启动本地预览，在浏览器中访问&lt;code&gt;localhost:4000&lt;/code&gt;预览配置的效果。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo s&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果满意的话，同步到Github上:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;更换主题&quot;&gt;&lt;a href=&quot;#更换主题&quot; class=&quot;headerlink&quot; title=&quot;更换主题&quot;&gt;&lt;/a&gt;更换主题&lt;/h2&gt;&lt;p&gt;关于主题的选择，可以到Hexo官方主题页面选择自己喜欢的主题，也可以到Github上搜索别人制作的主题。&lt;br&gt;使用Hexo更换主题，先使用克隆命令安装好主题，然后更改一下博客的配置文件&lt;code&gt;E:\Hexo\_config.yml&lt;/code&gt;里面的主题名称就好了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>js中的引用数据类型（二）和DOM操作</title>
    <link href="http://yoursite.com/2017/04/25/4.js%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(2)%E5%92%8CDOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/04/25/4.js中的引用数据类型(2)和DOM操作/</id>
    <published>2017-04-25T08:52:30.000Z</published>
    <updated>2017-08-14T08:51:14.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM 文档对象模型"></a>DOM 文档对象模型</h1><ul>
<li>DOM是Document Objet Model（文档对象模型）的缩写，它操作的顶级对象是document（文档对象）</li>
<li>DOM可以操作元素及元素的内容、标签属性、文字、音频视频等等。（只要是直接写在文档中的，DOM都可以操作）</li>
<li>DOM可以描述每个元素之间的关系图谱，例如xxx的父元素，xxx的子元素…<h2 id="DOM获取元素和样式"><a href="#DOM获取元素和样式" class="headerlink" title="DOM获取元素和样式"></a>DOM获取元素和样式</h2><h3 id="DOM获取元素"><a href="#DOM获取元素" class="headerlink" title="DOM获取元素"></a>DOM获取元素</h3><h4 id="通过DOM获取元素的方式"><a href="#通过DOM获取元素的方式" class="headerlink" title="通过DOM获取元素的方式"></a>通过DOM获取元素的方式</h4></li>
<li><strong>获取元素的范围.querySelector(“value”)</strong><ul>
<li>通过选择器获取元素</li>
<li>传入的value值与css选择器相同，可以写类、id、标签、后代选择器、子代选择器</li>
<li>IE低版本浏览器不兼容（ie678）</li>
<li>获取元素的范围.querySelector(“ id”);//获取一个</li>
</ul>
</li>
<li><strong>获取元素的范围.querySelectorAll(“value”)</strong><ul>
<li>获取指定范围内value这个名称的全部元素</li>
<li>IE低版本浏览器不兼容（ie678）</li>
<li>获取元素的范围.querySelectorAll(“.class”);//获取一组</li>
</ul>
</li>
<li><strong>document.getElementById(‘value’)</strong><ul>
<li>通过id获取一个元素，获取范围只能是document</li>
<li>如果一个页面有多个id名称相同的元素，只获取第一个</li>
<li>在ie67中，会将表单元素的name属性值当作id名称来调取，并且不区分大小写</li>
<li>可以直接使用元素的id来调取元素（不推荐使用）<a id="more"></a></li>
</ul>
</li>
<li><strong>document.getElementsByName(“name名字”)</strong><ul>
<li>通过元素name属性的属性值获取一组元素，多用在表单元素身上</li>
<li>通过name获取元素，上下文只能是document</li>
<li>通过name获取到的是一组元素（类数组，有length和索引）</li>
</ul>
</li>
<li><p><strong>获取元素的范围.getElementsByClassName(“value”)</strong></p>
<ul>
<li>通过元素的类名获取一组元素，获取到的是一个集合</li>
<li>在ie67中不兼容</li>
<li>通过[索引]的方式获取集合中的某一个</li>
<li>获取的范围可以自定义，一般是所获取元素的父级，最多不超过三级<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var list=document.getElementsByClassName(&apos;list&apos;);//获取到的是整个文档中所有类名叫做list的元素</div><div class="line">var cur=list[0];//获取到的是这个集合中的第1个元素</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>获取元素的范围.getElementsByTagName(“value”)</strong></p>
<ul>
<li>通过标签名获取一组元素（类数组，有length和索引）</li>
<li>通过索引来指定其中的一个元素</li>
<li>获取的范围可以自定义，一般是它的父级，最多不会超过三级</li>
</ul>
</li>
<li><strong>document.documentElement</strong>获取文档的根元素（rootelement）</li>
<li><strong>document.body</strong>获取文档的body元素</li>
<li><strong>获取当前页面的宽度和高度</strong><ul>
<li>document.documentElement.clientWidth  ||  document.body.clientWidth</li>
<li>document.documentElement.clientHeight  ||  document.body.clientHeight</li>
</ul>
</li>
<li>在移动端我们获取元素常用的方法（ie678不兼容）<ul>
<li>document.querySelector(“id”);//获取一个</li>
<li>document.querySelectorAll(“.class”);//获取一组</li>
<li>document.querySelectorAll(“tab li”);<br>p.s：jq中的选择器参考css选择器的规则</li>
</ul>
</li>
</ul>
<blockquote>
<p>通过Id和querySelector获取到的是一个元素（Element），通过ClassName、TagName、querySelectorAll获取到的是一组元素（Elements）。对于一组元素，如果要操作其中的一项，通过索引来指定。</p>
<p>注意：不能改变关键字的大小写</p>
</blockquote>
<ul>
<li>案例：<a href="#">点击变色</a></li>
</ul>
<h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><p>在给元素添加或修改内容的时，可识别标签中所有的内容，包括标签本身</p>
<h4 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h4><p>在给元素添加或修改内容时，只能识别标签中的文本，不能识别标签本身</p>
<p>如何增如何改？？？</p>
<h3 id="DOM获取元素的样式"><a href="#DOM获取元素的样式" class="headerlink" title="DOM获取元素的样式"></a>DOM获取元素的样式</h3><p>元素（对象）有个内置属性叫style，style属性也是一个对象，它有很多的样式属性<br>获取格式：<br><strong>元素.style.样式属性</strong><br>注意：style只能获取行内样式（所以不常用），添加样式也是加在行内（常用）<br>如<code>box.style.width</code></p>
<blockquote>
<p>style不能大写</p>
</blockquote>
<p><strong>window.getComputedStyle(元素).样式属性</strong><br>window可以省略<br>能获取所有样式（行内、内嵌、外链），但是只能获取，不能修改。<br>注意：IE6、7、8不兼容这个方法，有自己的方法currentStyle，使用格式为<strong>元素.currentStyle.样式属性</strong><br>如<code>getComputedStyle(box).width</code>，IE8以下<code>box.currentStyle.width</code></p>
<blockquote>
<p>给元素修改或增加class名，获取元素赋值给变量a，a.className=”name2”<br>如果元素a本身就有class名为name1，想要再增加一个class名为class2，使用字符串拼接的方法，a.className+=” name2”。</p>
</blockquote>
<h1 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h1><p>通过getElementsByClassName/getElementsByTagName等获取的是一个集合，类似于数组，叫类数组。类数组的数据类型是对象。<br><strong>索引：</strong>（可以理解为属性名）代表当前是第几个元素的下标，索引是从0开始的，索引0代表第1个元素，索引为n代表第n+1个元素。<br><strong>length：</strong>代表集合的长度。<br>通过DOM方法获取的类数组可以用[索引]的方法指定其中的某一个，还可以用“.item(索引)”来指定</p>
<ul>
<li>oLis[1]</li>
<li>oLis.item(1)</li>
<li>上面两种写法等价，都是指类数组oLis中的第二个元素。</li>
</ul>
<h1 id="DOM节点和关系属性"><a href="#DOM节点和关系属性" class="headerlink" title="DOM节点和关系属性"></a>DOM节点和关系属性</h1><p>在HTML DOM中，所有事物都是节点。DOM是被视为节点树的HTML。<br><strong>节点</strong>：(Node)在页面中出现的所有东西都是节点，元素、注释、文本等都是节点<br>通过HTML DOM，树中的所有节点均可通过JavaScript进行访问。所有 HTML元素（节点）均可被修改，也可以创建或删除节点。</p>
<ol>
<li><strong>xxx.childNodes</strong>  获取指定元素下的所有子节点，兼容所有浏览器，返回值是类数组</li>
<li>获取指定元素下的所有元素子节点，但是IE678不兼容，返回值是类数组</li>
<li><strong>xxx.parentNode</strong>  获取指定元素的父节点，返回值是一个元素节点，兼容所有浏览器</li>
<li><strong>xxx.previousSibling</strong>   获取指定元素的上一个节点（文本、标签、空格等等都是节点），兼容所有浏览器</li>
<li><strong>xxx.previousElementSibling</strong>  获取指定元素的上一个元素节点（只是标签）（不兼容）</li>
<li><strong>xxx.nextSibling</strong>  获取指定元素的下一个节点   </li>
<li><strong>xxx.nextElementSibling</strong> 获取指定元素的下一个元素节点（不兼容）</li>
<li><strong>xxx.firstChild</strong> 获取指定元素下的第一个子节点</li>
<li><strong>xxx.firstElementChild</strong> 获取指定元素下的第一个元素子节点（不兼容）</li>
<li><strong>xxx.lastChild</strong>  获取指定元素下的最后一个子节点</li>
<li><strong>xxx.lastElementChild</strong>  获取指定元素下的最后一个元素子节点（不兼容）</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">节点类型</th>
<th style="text-align:center">nodeType</th>
<th style="text-align:center">nodeName</th>
<th style="text-align:center">nodeValue</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">元素节点（元素标签）</td>
<td style="text-align:center">1</td>
<td style="text-align:center">大写的标签名</td>
<td style="text-align:center">null</td>
</tr>
<tr>
<td style="text-align:center">文本节点（文本）</td>
<td style="text-align:center">3</td>
<td style="text-align:center">\text</td>
<td style="text-align:center">文本内容</td>
</tr>
<tr>
<td style="text-align:center">注释节点（注释）</td>
<td style="text-align:center">8</td>
<td style="text-align:center">\comment</td>
<td style="text-align:center">注释内容</td>
</tr>
<tr>
<td style="text-align:center">document（整个文档）</td>
<td style="text-align:center">9</td>
<td style="text-align:center">\document</td>
<td style="text-align:center">null</td>
</tr>
</tbody>
</table>
<blockquote>
<p>p.s：在标准浏览器中会将空格（space）和回车（Enter）当做文本节点处理<br>标准浏览器：除了ie678</p>
</blockquote>
<p>对于不兼容的方法，<br>1.先判断当前浏览器是否支持这个方法，支持直接使用，不支持通过兼容的方法来解决。<br>判断是否支持，使用in方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/*解决previousElementSibling不兼容的方法</span></div><div class="line">    让浏览器先判断是否支持这个方法，支持直接使用，不支持则使用previousSibling这个兼容的方法来逐步寻找上一个节点，通过节点的nodeType值来判断找到的是不是元素节点。*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">curEle</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="string">"previousElementSibling"</span> <span class="keyword">in</span> curEle)&#123;</div><div class="line">    	<span class="keyword">return</span> curEle.previousElementSibling;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    	<span class="keyword">var</span> pre=curEle.previousSibling;</div><div class="line">    	<span class="keyword">while</span>(pre &amp;&amp; pre.nodeType!==<span class="number">1</span>)&#123;</div><div class="line">    		pre=pre.previousSibling;</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> pre;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取所有的哥哥节点：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevAll</span>(<span class="params">cruEle</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> pre=prev(cruEle);<span class="comment">//1.获取一个哥哥，调用上面获取上一个元素节点的函数</span></div><div class="line">	<span class="keyword">var</span> arr=[];<span class="comment">//2.准备一个数组</span></div><div class="line">	<span class="keyword">while</span>(pre)&#123;</div><div class="line">		ary.unshift(pre);<span class="comment">//3.判断有哥哥也就是pre存在的话，就放到数组arr中</span></div><div class="line">		pre=prev(pre);<span class="comment">//4.继续获取哥哥的上一个哥哥</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="DOM的增删改查及应用"><a href="#DOM的增删改查及应用" class="headerlink" title="DOM的增删改查及应用"></a>DOM的增删改查及应用</h1><h2 id="DOM元素的增删改查"><a href="#DOM元素的增删改查" class="headerlink" title="DOM元素的增删改查"></a>DOM元素的增删改查</h2><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><ul>
<li><strong>createElement()</strong>创建元素节点</li>
<li>父级元素.<strong>appendChild</strong>(new元素节点)<br>向指定元素所有内容之后添加一个元素节点</li>
<li>父级元素.<strong>insertBefore</strong>(new节点,old节点) 向指定元素之前添加新创建的节点元素<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3></li>
<li>父级元素.<strong>removeChild</strong>(节点名)删除创建的元素节点<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3></li>
<li>要克隆的节点对象.<strong>cloneNode</strong>（true）   克隆一份节点<ul>
<li>false(不填参数) 默认，只克隆当前元素，里面的内容不会复制</li>
<li>true将这个元素以及里面的所有内容都克隆一份<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3></li>
</ul>
</li>
<li>父级元素.<strong>replaceChild</strong>(替换的对象，被替换的对象)<br>替换<h2 id="DOM元素属性的增删改"><a href="#DOM元素属性的增删改" class="headerlink" title="DOM元素属性的增删改"></a>DOM元素属性的增删改</h2></li>
<li><strong>setAttribute</strong>(‘属性名’,’属性值’) 创建属性节点，（给元素增加新的属性），会添加到元素的开始标签内，一般在设置内置属性的时候会用到它。在IE678下不能设置class这个属性。</li>
<li><strong>getAttribute</strong>(‘属性名’) 获取属性节点，只能获取显示在HTML结构标签上的属性。通常setAttribute和getAttribute结合使用。</li>
<li><strong>removeAttribute</strong>(‘属性名’)删除属性节点<br>只能删除在HTML结构标签上的属性。<br>（删除属性的另外两种方法：对象.属性名=””（假删除），delete 对象.属性名（真删除））</li>
</ul>
<blockquote>
<p>增加属性的方法：</p>
<ol>
<li>obj.属性名=”属性值”，</li>
<li>obj[“属性名”]=”属性值”，</li>
<li>setAttribute(“属性名”,”属性值”)</li>
</ol>
</blockquote>
<p>通过前两种方法增加的属性，只有内置属性才会显示在元素标签内，自定义属性不会显示在HTML结构标签内，通过setAttribute增加的属性名和属性值不管是内置属性还是自定义属性，都会显示在元素的开始标签内</p>
<ul>
<li>案例：<a href="#">动态创建弹出层，点击消失</a></li>
</ul>
<h1 id="Math数学类"><a href="#Math数学类" class="headerlink" title="Math数学类"></a>Math数学类</h1><ul>
<li>Math.abs() 取绝对值</li>
<li>Math.ceil()向上取整 （出现小数点就向上＋1）</li>
<li>Math.floor()向下取整</li>
<li>Math.round()四舍五入</li>
<li>Math.max(val1,val2,val3…)取最大值</li>
<li>Math.min(val1,val2,val3…)取最小值</li>
<li>Math.random()获取[0-1)之间的随机小数（不包含1）</li>
<li>Math.round(Math.random()*(m-n)+n) 获取任意两个数[n,m]之间的随机数,包含n和m。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">		var str=&quot;&quot;;</div><div class="line">		for(var i=0;i&lt;4;i++)&#123;</div><div class="line">			var num=Math.round(Math.random()*61) //获取0-61之间的整数。</div><div class="line">			str+=num+&quot;  &quot;;</div><div class="line">		&#125;</div><div class="line">		document.write(str);</div><div class="line">```		</div><div class="line"># 字符串</div><div class="line">- String 对象用于处理已有的字符块（空格、换行也是字符）</div><div class="line">- 字符串也有length属性，代表字符串的长度</div><div class="line">- 字符串也有索引，每一个索引代表一个字符</div><div class="line">- 字符串类也是对象，也有属性名和属性值，它的属性名是当前字符的索引，属性值是当前的字符</div><div class="line"></div><div class="line">##  获取指定索引位置的字符</div><div class="line">charAt(索引)返回传入索引处的字符</div></pre></td></tr></table></figure>
</li>
</ul>
<p>var str=”abcde”;<br>console.log(str[3]);//“d”<br>console.log(str.charAt(3)); //“d”<br>console.log(str.charCodeAt(3));<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- 在字符串中，str[3]和str.charAt(3)等价</div><div class="line">- charCodeAt(索引)--&gt;获取指定索引位置字符对应的ASCII值（Unicode编码）</div><div class="line"></div><div class="line"></div><div class="line">##  字符串截取</div><div class="line">- substr(n,m) 从索引n开始，截取m个字符</div><div class="line">- substring(n,m) 从索引n开始找到索引m处，不包含m</div><div class="line">- slice(n,m) 从索引n开始找到索引m处，不包含m--&gt;</div><div class="line">    - 支持负数作为索引（str.length+负数索引）</div><div class="line">- 只写n没有m：代表截取到末尾位置;</div><div class="line">```   </div><div class="line"> var str=&quot;abcde&quot;;</div><div class="line"> var val1=str.slice(2,4);//截取索引2到索引4的字符，不包含索引4的字符，--&gt;&quot;cd&quot;</div><div class="line"> var val2=str.slice(-3,-1);//length=5,截取索引(-3+5)到索引(-1+5)的字符，不包含索引(-1+5)的字符，--&gt;&quot;cd&quot;</div><div class="line"> var val3=str.slice(3);//从索引为3的字符截取到最后的字符  --&gt;&quot;de&quot;</div></pre></td></tr></table></figure></p>
<h2 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h2><ul>
<li>toLowerCase()转化为小写</li>
<li>toUpperCase()转化为大写<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=&quot;abcde&quot;;</div><div class="line">str.toUpperCase();</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h2><p>replace(oldWord,newWord) 替换  </p>
<ul>
<li>不会改变原字符串，返回一个修改后的新的字符串</li>
<li>返回值是替换后的字符串，原字符串不变</li>
<li>只能进行一次替换，如果后面还有相同的字符，只能替换第一次遇到的字符，而不能替换后面的字符的</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="string">"abaababbcaabcdab"</span>;</div><div class="line"><span class="keyword">var</span> ss=s.replace(<span class="string">'a'</span>,<span class="string">'A'</span>);<span class="comment">//只替换第一个'a'</span></div><div class="line"><span class="built_in">console</span>.log(s,ss);<span class="comment">//不修改原字符串</span></div><div class="line"><span class="comment">//要替换s中所有的'a'为'A'，使用while循环</span></div><div class="line"><span class="keyword">while</span>(s.indexOf(<span class="string">'a'</span>)!==<span class="number">-1</span>)&#123;</div><div class="line">    s=s.replace(<span class="string">'a'</span>,<span class="string">'A'</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(s);</div></pre></td></tr></table></figure>
<h2 id="字符串的查找"><a href="#字符串的查找" class="headerlink" title="字符串的查找"></a>字符串的查找</h2><ul>
<li><p>search(‘指定的字符’)</p>
<ul>
<li>search(‘指定的字符’)返回值是该字符第一次出现位置的索引值</li>
<li>如果没找到，说明该字符串没有这个字符，返回-1</li>
</ul>
</li>
<li><p>match(‘指定的字符’）；</p>
<ul>
<li>匹配字符的，找到，就把找到的内容以数组的形式返回；找不到null</li>
<li>返回结果格式：[“指定的字符”，index：索引值，input:”所在的字符串”]</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"abcdef"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.search(<span class="string">'c'</span>));<span class="comment">//--&gt;2</span></div><div class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'c'</span>));<span class="comment">//--&gt;["c", index: 2, input: "abcdef"]</span></div></pre></td></tr></table></figure>
<h2 id="查找指定字符所在字符串的索引值"><a href="#查找指定字符所在字符串的索引值" class="headerlink" title="查找指定字符所在字符串的索引值"></a>查找指定字符所在字符串的索引值</h2><ul>
<li>字符串.indexOf(‘指定的字符’)返回值是该字符在字符串中第一次出现位置的索引值</li>
<li>字符串.lastIndexOf(‘指定的字符’)返回值是该字符在字符串中最后一次出现位置的索引值</li>
<li>如果没找到，说明该字符串没有这个字符，返回-1</li>
<li>indexOf(字符，索引)，lastIndexOf(字符，索引)，第一个参数必填，第二个参数选填，第二个参数时在原字符串开始查找的索引，缺省的情况下默认是从0开始。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"abcdefcdabcdabca"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"c"</span>));<span class="comment">//"2"</span></div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"c"</span>,<span class="number">5</span>));<span class="comment">//从索引5开查找，查找"c"在str中索引5的字符（即f）之后第一次出现时的索引,"6"</span></div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"c"</span>,<span class="number">10</span>));<span class="comment">//"10"</span></div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"k"</span>));<span class="comment">//"-1",表示不存在</span></div><div class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"c"</span>));<span class="comment">//"14"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//产生4个1-9之间不重复的随机数</span></div><div class="line"><span class="keyword">var</span> str=<span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">        <span class="keyword">var</span> val=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(<span class="number">9</span><span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (str.indexOf(val)===<span class="number">-1</span>)&#123;</div><div class="line">            str+=val+<span class="string">" "</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            i--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<h2 id="将字符串按照指定分隔符拆分成数组"><a href="#将字符串按照指定分隔符拆分成数组" class="headerlink" title="将字符串按照指定分隔符拆分成数组"></a>将字符串按照指定分隔符拆分成数组</h2><p>split(“分隔符”)</p>
<ul>
<li>输出结果是字符串组成的数组，</li>
<li>分隔符不会出现在数组中</li>
<li>如果不传分隔符，把字符串中的每一项单独分开</li>
<li>如果分隔符不存在于字符串中，会把字符串整体当做一项输出在数组中</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"abcd"</span>;</div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">"b"</span>));<span class="comment">//["a","cd"]</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">''</span>));<span class="comment">//["a","b","c","d"]</span></div><div class="line"><span class="built_in">console</span>.log(str.split(<span class="string">'t'</span>)); <span class="comment">//["abcd"]</span></div></pre></td></tr></table></figure>
<p>作业一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">将&quot;2016-11-01 12:51:6&quot;转换成“2016年11月01日 12时51分06秒”</div></pre></td></tr></table></figure></p>
<p>思路：通过空格将time分成一个数组的两项，取出数组中的第一项，将这个字符串通过-分开成新的数组，取出第二项，通过：分开成一个新的数组，然后再从两个数组中分别取出每一项，然后和年月日时分秒进行字符串拼接。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> time=<span class="string">"2016-11-01 12:51:06"</span>;</div><div class="line"><span class="keyword">var</span> str=time.split(<span class="string">" "</span>);</div><div class="line"><span class="keyword">var</span> date=str[<span class="number">0</span>].split(<span class="string">"-"</span>);</div><div class="line"><span class="keyword">var</span> time1=str[<span class="number">1</span>].split(<span class="string">":"</span>);</div><div class="line"><span class="built_in">console</span>.log(date[<span class="number">0</span>]+<span class="string">"年"</span>+date[<span class="number">1</span>]+<span class="string">"月"</span>+date[<span class="number">2</span>]+<span class="string">"日"</span>+time1[<span class="number">0</span>]+<span class="string">"时"</span>+time1[<span class="number">1</span>]+<span class="string">"分"</span>+time1[<span class="number">2</span>]+<span class="string">"秒"</span>);</div></pre></td></tr></table></figure></p>
<p>作业二：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">""</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">    <span class="keyword">var</span> val=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(<span class="number">9</span><span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (str.indexOf(val)===<span class="number">-1</span>)&#123;</div><div class="line">        str+=val+<span class="string">" "</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        i--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str);</div><div class="line"></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line">将这个效果转为while循环:</div><div class="line">    while (xxx的长度小于4)&#123;</div><div class="line">        这里面的代码就会一直执行</div><div class="line">    &#125;</div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="keyword">var</span> str=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">var</span> val=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(<span class="number">9</span><span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">    <span class="keyword">if</span> (str.indexOf(val)===<span class="number">-1</span>)&#123;</div><div class="line">        i++;</div><div class="line">        str+=val+<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary=[];</div><div class="line"><span class="keyword">while</span>(ary.length&lt;<span class="number">4</span>)&#123;</div><div class="line">    <span class="keyword">var</span> val=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(<span class="number">9</span><span class="number">-1</span>)+<span class="number">1</span>);</div><div class="line">    ary.push(val);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(ary);</div></pre></td></tr></table></figure>
<p>作业三：<br>var str=”abcdefgh1234567890ABCDEFGH”;<br>返回四个字符，是str中任意四个并且不重复</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">点击获取验证码：</div><div class="line"><span class="keyword">var</span> str=<span class="string">"abcdefgh1234567890ABCDEFGH"</span>;</div><div class="line"><span class="keyword">var</span> cha=str.split();</div><div class="line"><span class="keyword">var</span> str1=<span class="string">""</span>;</div><div class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span>(i&lt;<span class="number">4</span>)&#123;</div><div class="line">	<span class="keyword">var</span> index=<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random()*(cha.length<span class="number">-1</span>));<span class="comment">//产生0到cha的（长度-1）之间的随机数。</span></div><div class="line">	<span class="keyword">if</span>(str1.indexOf(cha[index])===<span class="number">-1</span>)&#123;</div><div class="line">		str1+=cha[index]+<span class="string">" "</span>;</div><div class="line">		i++;</div><div class="line">		<span class="built_in">console</span>.log(index,cha[index]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(str1);</div></pre></td></tr></table></figure>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="定时器的作用："><a href="#定时器的作用：" class="headerlink" title="定时器的作用："></a>定时器的作用：</h2><p>想要一个方法按照指定的时间重复执行，或指定一个时间只执行一次，这个时候，就需要定时器。<br>设置一个定时器，设置一个等待时间，到达指定时间后执行对应的操作</p>
<h2 id="定时器的分类"><a href="#定时器的分类" class="headerlink" title="定时器的分类"></a>定时器的分类</h2><p>定时器是一个全局函数，里面需要传入两个参数，第一个参数是一个函数（就是你要执行的函数），第二个参数是时间（过多久执行）。</p>
<h3 id="多次执行的定时器"><a href="#多次执行的定时器" class="headerlink" title="多次执行的定时器"></a>多次执行的定时器</h3><ul>
<li>window.setInterval([function],[interval])<br>设置一个定时器，到达指定时间[interval]，执行[function]，然而定时器并没有停止，他会每隔[interval]时间，都会重新执行[function]</li>
</ul>
<h3 id="只执行一次的定时器"><a href="#只执行一次的定时器" class="headerlink" title="只执行一次的定时器"></a>只执行一次的定时器</h3><ul>
<li>window.setTimeout([function],[interval])<br>设置定时器，到达指定[interval]，执行[function]，定时器停止<ul>
<li>时间参数都是以毫秒为单位，1s=1000ms</li>
<li>定时器是windows的方法，所以可以省略windows。</li>
<li>定时器的返回值：是一个数字，代表当前第几个定时器，不区分setInterval和setTimeout</li>
</ul>
</li>
</ul>
<h2 id="清除定时器（将定时器停止）"><a href="#清除定时器（将定时器停止）" class="headerlink" title="清除定时器（将定时器停止）"></a>清除定时器（将定时器停止）</h2><ul>
<li>clearTimeout(定时器名称)</li>
<li>clearInterval(定时器名称)</li>
</ul>
<blockquote>
<p>通过setInterval设定的定时器，当执行次数达到某个值(k)后如何使其停止？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(i&lt;k)&#123;i++&#125;</div><div class="line">    <span class="keyword">else</span>&#123;clearInterval(timer)&#125;</div><div class="line">&#125;,<span class="number">1000</span>)</div></pre></td></tr></table></figure></p>
<p>在设置定时器的时候，[function]只是函数的定义部分，不加(),加()代表的是函数的执行。如果功能需要必须要传参数，可以在设置定时器的部分再定义一个匿名函数，把要执行的函数放在新定义的函数内。如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是函数"</span>+n);</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    fn1(<span class="number">1</span>);</div><div class="line">    <span class="built_in">console</span>.log(fn1(<span class="number">1</span>));</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
</blockquote>
<p>运行结果：</p>
<pre><code>我是函数1
我是函数1
1
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是函数"</span>+n);</div><div class="line">&#125; </div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    fn1(<span class="number">1</span>);</div><div class="line">    <span class="built_in">console</span>.log(fn1(<span class="number">1</span>));</div><div class="line">&#125;,<span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<pre><code>我是函数1
我是函数1
undefined
</code></pre><p>案例：<a href="#">点击按钮元素向右移动</a></p>
<p>作业：<br>抽奖：随机产生0-9之间的6个数字，可以重复，每隔1s产生新的6位数字，并显示的页面上，到10秒的时候结束，页面显示最终值，并且弹出字符串“恭喜你中奖了”</p>
<h1 id="Date时间类"><a href="#Date时间类" class="headerlink" title="Date时间类"></a>Date时间类</h1><p>Date对象用于处理日期和时间<br>var myDate=new Date()  //获取当前自己电脑的时间<br>Date 对象会自动把当前日期和时间保存为其初始值<br>在项目中不会获取自己本机的时间，而是获取服务器的 时间<br>将时间格式转换为标准时间格式<br>var tDate=new Date(‘2016-11-01 10:01:01’)<br>在ie67下’-‘不支持需要改成’/‘<br>var tDate=new Date(‘2016/11/01 10:01:01’)</p>
<h2 id="获取年月日、星期、时分秒毫秒"><a href="#获取年月日、星期、时分秒毫秒" class="headerlink" title="获取年月日、星期、时分秒毫秒"></a>获取年月日、星期、时分秒毫秒</h2><ul>
<li>var year=time.getFullYear();//设置 Date 对象中的年份（四位数字）</li>
<li>var month=time.getMonth();//根据世界时设置 Date 对象中的月份 (0 ~ 11) </li>
<li>var day=time.getDate();//从 Date 对象返回一个月中的某一天 (1 ~ 31)</li>
<li>var week=time.getDay();//从 Date 对象返回一周中的某一天 (0 ~ 6) 代表周日-周六，周日是0</li>
<li>var hours=time.getHours();//返回 Date 对象的小时 (0 ~ 23)</li>
<li>var minutes=time.getMinutes();//返回 Date 对象的分钟 (0 ~ 59)</li>
<li>var seconds=time.getSeconds();//返回 Date 对象的秒数 (0 ~ 59)</li>
<li>var mSeconds=time.getMilliseconds();//返回 Date 对象的毫秒(0 ~ 999)<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">myDate.getYear(); <span class="comment">//获取当前年份(2位)</span></div><div class="line">myDate.getFullYear(); <span class="comment">//获取完整的年份(4位,1970-????)</span></div><div class="line">myDate.getMonth(); <span class="comment">//获取当前月份(0-11,0代表1月)</span></div><div class="line">myDate.getDate(); <span class="comment">//获取当前日(1-31)</span></div><div class="line">myDate.getDay(); <span class="comment">//获取当前星期X(0-6,0代表星期天)</span></div><div class="line">myDate.getTime(); <span class="comment">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class="line">myDate.getHours(); <span class="comment">//获取当前小时数(0-23)</span></div><div class="line">myDate.getMinutes(); <span class="comment">//获取当前分钟数(0-59)</span></div><div class="line">myDate.getSeconds(); <span class="comment">//获取当前秒数(0-59)</span></div><div class="line">myDate.getMilliseconds(); <span class="comment">//获取当前毫秒数(0-999)</span></div><div class="line">myDate.toLocaleDateString(); <span class="comment">//获取当前日期</span></div><div class="line"><span class="keyword">var</span> mytime=myDate.toLocaleTimeString(); <span class="comment">//获取当前时间</span></div><div class="line">myDate.toLocaleString(); <span class="comment">//获取日期与时间</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM-文档对象模型&quot;&gt;&lt;a href=&quot;#DOM-文档对象模型&quot; class=&quot;headerlink&quot; title=&quot;DOM 文档对象模型&quot;&gt;&lt;/a&gt;DOM 文档对象模型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;DOM是Document Objet Model（文档对象模型）的缩写，它操作的顶级对象是document（文档对象）&lt;/li&gt;
&lt;li&gt;DOM可以操作元素及元素的内容、标签属性、文字、音频视频等等。（只要是直接写在文档中的，DOM都可以操作）&lt;/li&gt;
&lt;li&gt;DOM可以描述每个元素之间的关系图谱，例如xxx的父元素，xxx的子元素…&lt;h2 id=&quot;DOM获取元素和样式&quot;&gt;&lt;a href=&quot;#DOM获取元素和样式&quot; class=&quot;headerlink&quot; title=&quot;DOM获取元素和样式&quot;&gt;&lt;/a&gt;DOM获取元素和样式&lt;/h2&gt;&lt;h3 id=&quot;DOM获取元素&quot;&gt;&lt;a href=&quot;#DOM获取元素&quot; class=&quot;headerlink&quot; title=&quot;DOM获取元素&quot;&gt;&lt;/a&gt;DOM获取元素&lt;/h3&gt;&lt;h4 id=&quot;通过DOM获取元素的方式&quot;&gt;&lt;a href=&quot;#通过DOM获取元素的方式&quot; class=&quot;headerlink&quot; title=&quot;通过DOM获取元素的方式&quot;&gt;&lt;/a&gt;通过DOM获取元素的方式&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取元素的范围.querySelector(“value”)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;通过选择器获取元素&lt;/li&gt;
&lt;li&gt;传入的value值与css选择器相同，可以写类、id、标签、后代选择器、子代选择器&lt;/li&gt;
&lt;li&gt;IE低版本浏览器不兼容（ie678）&lt;/li&gt;
&lt;li&gt;获取元素的范围.querySelector(“ id”);//获取一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取元素的范围.querySelectorAll(“value”)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;获取指定范围内value这个名称的全部元素&lt;/li&gt;
&lt;li&gt;IE低版本浏览器不兼容（ie678）&lt;/li&gt;
&lt;li&gt;获取元素的范围.querySelectorAll(“.class”);//获取一组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;document.getElementById(‘value’)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;通过id获取一个元素，获取范围只能是document&lt;/li&gt;
&lt;li&gt;如果一个页面有多个id名称相同的元素，只获取第一个&lt;/li&gt;
&lt;li&gt;在ie67中，会将表单元素的name属性值当作id名称来调取，并且不区分大小写&lt;/li&gt;
&lt;li&gt;可以直接使用元素的id来调取元素（不推荐使用）
    
    </summary>
    
    
      <category term="js;数据类型;DOM" scheme="http://yoursite.com/tags/js-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-DOM/"/>
    
  </entry>
  
  <entry>
    <title>js中的引用数据类型</title>
    <link href="http://yoursite.com/2017/04/25/3.js%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/04/25/3.js中的引用数据类型/</id>
    <published>2017-04-25T08:52:30.000Z</published>
    <updated>2017-08-14T08:51:03.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="object对象"><a href="#object对象" class="headerlink" title="object对象"></a>object对象</h2><p>js中引用数据类型分为对象数据类型和函数数据类型。<br>对象数据类型：</p>
<ul>
<li>数组类Array</li>
<li>对象类Object</li>
<li>数学类Math</li>
<li>正则类RegExp</li>
<li>时间类Date</li>
</ul>
<p>Object是引用数据类型中的对象类，每一个我们使用的具体对象都是这个类的一个实例。</p>
<p>对象类中的实例都是有键值对组成的（属性名和属性值），键值对是用来描述这个对象特征的。</p>
<p>如何在js中创建一个对象实例：</p>
<ul>
<li>字面量创建 </li>
<li><p>对象名={属性名1：属性值1，属性名2：属性值2}</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">name</span>:value,</div><div class="line">	<span class="attr">name2</span>:value2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实例创建 ，在该类上新建一个实例</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">//括号可以省略</span></div></pre></td></tr></table></figure>
<ul>
<li>对对象进行查增改删等操作可以有两种写法：<ul>
<li>对象名.属性名</li>
<li>对象名[“属性名”]<br>注意：使用第二种写法时，必须加双引号；如果属性名为数字，只能用第二种写法，并且双引号可以省略。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="attr">a</span>:<span class="string">"a"</span>,</div><div class="line">	<span class="attr">b</span>:<span class="number">12</span>,</div><div class="line">	<span class="attr">c</span>:a</div><div class="line">&#125;;</div><div class="line">obj[<span class="string">"a"</span>]=b;  <span class="comment">//a为属性名，b为变量（值为2），修改属性a的属性值为2，→a:2 </span></div><div class="line">obj[a]=b;  <span class="comment">//a为变量（值为1），b为变量（值为2），增加属性名为1，属性值为2→1:2</span></div><div class="line">obj.c=a;  <span class="comment">//c为属性名，a为变量（值为2）→c:2</span></div><div class="line"><span class="built_in">console</span>.log(obj);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1：2</div><div class="line">a：2</div><div class="line">b：12</div><div class="line">c：2</div></pre></td></tr></table></figure>
<ul>
<li><p>访问对象——查找：</p>
<ul>
<li>对象名.属性名</li>
<li>对象名[“属性名”]</li>
</ul>
</li>
<li><p>访问对象——增加键值对：</p>
<ul>
<li>对象名.属性名=值</li>
<li>对象名[“属性名”]=值<blockquote>
<p>属性名为数字时，只能用“对象名[“属性名”]=值”的方式来就行添加或获取，并且引号可以不写。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>访问对象——修改键值对：</p>
<ul>
<li>对象名.属性名=值</li>
<li>对象名[“属性名”]=值</li>
</ul>
</li>
<li><p>访问对象——删除：</p>
<ol>
<li>删除整个键值对<br>delete 对象名.属性名</li>
<li>删除属性值，保留属性名<br>delete 对象名.属性名=null</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj=&#123;&#125;;<span class="comment">//创建一个新的对象</span></div><div class="line">obj.属性名=属性值; <span class="comment">//向对象中增加键值对</span></div><div class="line">obj.属性名=新的属性值;<span class="comment">//修改对象中属性值</span></div><div class="line"><span class="keyword">delete</span> obj.属性名=<span class="literal">null</span>;<span class="comment">//删除对象中的属性值，保留属性名</span></div><div class="line"><span class="keyword">delete</span> obj.属性名;<span class="comment">//删除对象中的属性键值对</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj=&#123;&#125;;//创建一个新的对象</div><div class="line">obj.["属性名"]=属性值; //向对象中增加键值对</div><div class="line">obj.["属性名"]"=新的属性值;//修改对象中属性值</div><div class="line">delete obj.["属性名"]=null;//删除对象中的属性值，保留属性名</div><div class="line">delete obj.["属性名"];//删除对象中的属性键值对</div></pre></td></tr></table></figure>
<ul>
<li><a href="##">习题2</a></li>
</ul>
<h2 id="函数function"><a href="#函数function" class="headerlink" title="函数function"></a>函数function</h2><h4 id="函数的语法"><a href="#函数的语法" class="headerlink" title="函数的语法"></a>函数的语法</h4><ul>
<li>函数的定义（创建）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</div><div class="line">	js代码块</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>函数的调用（执行）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">函数名();</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>函数调用要加上后面的()，如果只有函数名，而没有小括号，代表的是函数本身，而函数没有执行。加上小括号后代表的是执行函数</p>
</blockquote>
<ul>
<li>因为函数是引用数据类型，所以在运行时，浏览器会给函数开辟一个内存空间，将代码以字符串的形式放入，只有在调取这个函数的时候，函数才会执行，不会随着全局作用域一起执行；</li>
<li>函数定义后，可以多次执行，并且每次执行与上一次执行没有任何关系。</li>
</ul>
<h4 id="函数的原理："><a href="#函数的原理：" class="headerlink" title="函数的原理："></a>函数的原理：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">   total=a+b;</div><div class="line">   <span class="keyword">return</span> total;</div><div class="line">&#125;</div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>);</div></pre></td></tr></table></figure>
<ul>
<li>当浏览器加载页面的时候，首先会提供一个供js代码执行的环境，叫做全局作用域。</li>
<li>浏览器加载时遇到函数的创建，<br>1)首先开辟一个新的内存空间，浏览器为其分配一个十六进制的内存空间，我们假设地址为xxxfff000<br>2)把函数体中的js代码当作<strong>字符串</strong>存储到内存空间中<br>3)再把这个地址赋值给当前的函数，此时sum(a,b)=xxxfff000；</li>
<li>函数执行的时候，把之前存储的字符串变成js代码，然后从上到下依次执行。<br>1)当函数执行的时候，首先会提供一个供函数体中代码执行的环境，叫私有作用域。<br>2)把函数体中的代码字符串变成代码从上到下执行。</li>
<li>函数执行的时候，首先会形成一个新的私有作用域，供函数体中的代码从上到下执行，形成的那个私有的作用域，把函数体中的代码都包起来，保护了里面的私有的变量不受外界的干扰（外面获取不了也修改不了），我们把函数执行的时候形成的这种保护机制叫做“<strong>闭包</strong>”。</li>
</ul>
<h4 id="函数中的参数"><a href="#函数中的参数" class="headerlink" title="函数中的参数"></a>函数中的参数</h4><ul>
<li>形参是用来接收函数执行时传入的实参的入口，形参相当于一个变量，只不过是只定义而未赋值的变量；</li>
<li><p>实参是在函数执行时定义的，相当于函数执行值给形参赋值，实参和形参的顺序是一一对应关系。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">total</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span></span>)</span>&#123;</div><div class="line">	函数体</div><div class="line">&#125;</div><div class="line">total(实参<span class="number">1</span>,实参<span class="number">2</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>执行的时候只需要把对应的形参的值传递给函数即可。</p>
</li>
<li>如果定义了形参，但在执行的时候没有传递实参，默认的形参的值是undefined。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    sum=a+b;</div><div class="line">    <span class="built_in">console</span>.log(sum);</div><div class="line">    &#125;</div><div class="line">sum(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//sum=1+2   →3</span></div><div class="line">sum(<span class="number">3</span>);<span class="comment">//sum=3+undefined  →NaN</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><ul>
<li>作用：将函数中的值的返回到函数外<br>因为函数是一个引用数据类型，函数中的内容都会在浏览器开辟的内存空间中以字符串的形式保存，那么其它空间或全局作用域中想要得到函数内的变量，是没有办法的，这个内存空间将这个里面的变量保护起来了，如果想要获取函数内的值，可以用个return value的形式将值返回到函数外，函数名()用来接收这个函数返回值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> total=<span class="number">300</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> total=fn();<span class="comment">//执行fn，将fn执行的返回值赋值给total</span></div><div class="line"><span class="built_in">console</span>.log(total);<span class="comment">//输出为undefined。</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> total=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span> total*<span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn);<span class="comment">//输出fn这个函数本身</span></div><div class="line"><span class="built_in">console</span>.log(fn());<span class="comment">//输出fn执行的结果，返回值20</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> total=<span class="number">2</span>;</div><div class="line">    <span class="keyword">return</span>;<span class="comment">//return;的返回值是undefined</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);<span class="comment">//return后面的代码不会再执行</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn());<span class="comment">//输出fn运行的返回值是undefined</span></div></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>函数内遇到return，return后面的代码就不会再执行，因此return有终止函数体中代码执行的作用。</li>
<li>return 将值返回到函数外</li>
<li>函数执行用来接收这个返回值</li>
<li>形参是函数的入口，返回值是函数的出口</li>
<li>如果函数中没有return，默认的返回值是undefined</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn());</div><div class="line"><span class="comment">//fn(),fn函数先执行，得到一个返回值（return后面的内容是什么就返回什么），将这个返回值输出:</span></div><div class="line">   <span class="comment">//&gt;输出1</span></div><div class="line">   <span class="comment">//&gt;输出function()&#123;console.log(2);&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> ff=fn();<span class="comment">//将fn执行的结果赋值给ff，ff=function()&#123;console.log(2)&#125;</span></div><div class="line">    <span class="comment">//&gt;输出1</span></div><div class="line">    <span class="comment">//&gt;输出2</span></div><div class="line"><span class="built_in">console</span>.log(ff());<span class="comment">//ff()代表ff执行的结果，ff执行的结果就是function()&#123;console.log(2)&#125;的返回值，返回值是undefined；</span></div><div class="line">    <span class="comment">//&gt;输出undefined</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);    </div><div class="line">    &#125;)();<span class="comment">//自执行函数</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(fn());</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line">    &gt;<span class="number">1</span></div><div class="line">    &gt;<span class="number">2</span></div><div class="line">    &gt;<span class="literal">undefined</span></div></pre></td></tr></table></figure>
<h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>arguments是函数自带的用来接收函数传递进来的参数值的集合，（不管写没写形参，也不管传递实参，arguments始终都是存在的。）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.dir(<span class="built_in">arguments</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>);<span class="comment">//→"object" 它是一个对象数据类型</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> total=sum(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>);</div></pre></td></tr></table></figure></p>
<pre><code>Arguments[3]
    0: 100
    1: 200
    2: 300
callee: function sum()
length: 3
__proto__:Object
</code></pre><p>观察它的结构，arguments是以数字作为索引，索引从0开始逐渐递增，索引0存储的是第一个实参值，索引1存储的是第二个实参值，索引n存储的是第n+1个实参值；有一个叫length的属性代表一共传递了多少个实参；→它不是数字，称之为类数组。</p>
<p>arguments还有个属性叫callee，<strong>arguments.callee代表的是函数本身</strong>(如上面例子中的，arguments.callee()和sum()是一个意思)</p>
<p>arguments 获取到的是一个实参的集合，将获取到的实参放在一个中括号中，每一个实参之间用逗号隔开。</p>
<p>案例：<a href="##">任意数求和</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> total=<span class="literal">null</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</div><div class="line">			<span class="comment">//将传进来的值转为数字</span></div><div class="line">			<span class="keyword">var</span> cur=<span class="built_in">Number</span>(<span class="built_in">arguments</span>[i]);</div><div class="line">			<span class="comment">//判断转化后是不是一个有效数字</span></div><div class="line">			<span class="keyword">if</span>(!<span class="built_in">isNaN</span>(cur))&#123;</div><div class="line">				total+=cur;</div><div class="line">			&#125;</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">return</span> total;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="string">"1"</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="string">"a"</span>,<span class="number">8</span>));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h4 id="实名函数和匿名函数"><a href="#实名函数和匿名函数" class="headerlink" title="实名函数和匿名函数"></a>实名函数和匿名函数</h4><p>实名函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>匿名函数：<br>常见的使用匿名函数的场景：<br>1）给元素绑定事件<br>2）把函数当作参数，比如定时器，sort，forEach，map<br>在js中常用到的匿名函数有两种方式：<br>1）自执行函数：函数定义和函数执行一起完成<br>2）函数表达式：把函数定义的部分当作一个值赋值给一个变量或者元素的某一个事件。<br><strong>自执行函数</strong><br>;(function(形参){函数体})(实参)//最常用的写法，前面加;的作用是为了防止上面代码结束不加分号而引起语义错误。<br>+function(形参){函数体}(实参)<br>-function(形参){函数体}(实参)<br>!function(形参){函数体}(实参)<br>~function(形参){函数体}(实参)<br>各种写法表示的都是相同的意思。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">       conlole.log(a);</div><div class="line">   &#125;)(<span class="number">100</span>);</div><div class="line">   +<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       </div><div class="line">   &#125;();</div><div class="line">   ~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       </div><div class="line">   &#125;();</div><div class="line">   -<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       </div><div class="line">   &#125;();</div></pre></td></tr></table></figure></p>
<p><strong>函数表达式</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   btn.onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'你点我，我就弹出'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fn=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="comment">//执行</span></div><div class="line">fn()</div></pre></td></tr></table></figure></p>
<blockquote>
<p>函数名也是一个变量，用来代表和储存这个函数</p>
</blockquote>
<p>案例：</p>
<ul>
<li>点击弹出当前行数</li>
<li>隔行变色</li>
<li>移入移出</li>
<li>将前三个整理到一起</li>
<li>选项卡</li>
<li>99</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">lis[i].onclick=function () &#123;</div><div class="line">	// 如果这个函数内出现了this，this代表的是当前操作的这个对象</div><div class="line">    alert(&apos;我是第&apos;+this.zfpx+&apos;个li&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="js中的运算符"><a href="#js中的运算符" class="headerlink" title="js中的运算符"></a>js中的运算符</h3><ul>
<li>赋值运算<ul>
<li>= 赋值 </li>
<li>+= <ul>
<li>x+=y  –&gt;  x=x+y</li>
</ul>
</li>
<li>-=   <ul>
<li>x-=y   –&gt;  x=x-y</li>
</ul>
</li>
<li>*= <ul>
<li>x<em>=y  –&gt;  x=x</em>y</li>
</ul>
</li>
<li>/= <ul>
<li>x/=y  –&gt;  x=x/y</li>
</ul>
</li>
<li>%=<ul>
<li>x%=y   –&gt;  x=x%y</li>
</ul>
</li>
</ul>
</li>
<li><p>比较运算符 </p>
<ul>
<li><p>==比较</p>
</li>
<li><p>===绝对比较</p>
<ul>
<li>比较等号两侧的值是否相等，两侧的值需是相同数据类型，如果相等，返回true，如果不相等返回false。</li>
</ul>
</li>
<li>!= 不等于</li>
<li><blockquote>
<p>小于</p>
</blockquote>
</li>
<li>&lt; 大于</li>
<li><blockquote>
<p>=大于等于</p>
</blockquote>
</li>
<li>&lt;=小于等于</li>
</ul>
</li>
<li>逻辑运算符<ul>
<li>&amp;&amp; 和  and</li>
<li>||  或  or</li>
<li>！非</li>
<li>&amp;&amp;，第一个值转布尔为true则返回第二个值，第一个为false则返回第一个值</li>
<li>||，第一个值转布尔为true则返回第一个值，第一个值为false则返回第二个值</li>
<li>console.log(! [] &amp;&amp; “” )  –&gt;false</li>
<li>console.log( ![] || “” )  –&gt;  “”</li>
</ul>
</li>
<li>算术运算符<ul>
<li>+加</li>
<li>-减</li>
<li>*乘</li>
<li>/除</li>
<li>%模（求余数）</li>
<li>++自加</li>
<li>–自减</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> y=++x;  <span class="comment">//先运算，再赋值，相当于x=x+1,y=x</span></div><div class="line"><span class="built_in">console</span>.log(x,y);</div><div class="line">输出<span class="number">2</span>,<span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> y=x++; <span class="comment">//先运算，后累加,相当于y=x，x=x+1</span></div><div class="line"><span class="built_in">console</span>.log(x,y);</div><div class="line">输出<span class="number">2</span>,<span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(a++);</div><div class="line"><span class="comment">//输出1，1。a++表达式整体的值是1，a++后a的值是2</span></div><div class="line"><span class="keyword">var</span> b=<span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(++b);</div><div class="line"><span class="comment">//输出1，2。++b表达式整体的值是2，++b后b的值是2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log((s++)+(++s)+(s--)+s+(--s));</div></pre></td></tr></table></figure>
<h4 id="js中数据类型的比较"><a href="#js中数据类型的比较" class="headerlink" title="js中数据类型的比较"></a>js中数据类型的比较</h4><ul>
<li>比较等号两侧的值是否相等，如果相等，返回true，不相等返回false。允许两侧数据类型不一致，如果不一致，等号两侧会默认转为同一数据类型再进行比较。</li>
<li>对象==对象    永远不相等</li>
<li>对象==字符串   对象转为字符串，<strong>字符串和字符串比较</strong></li>
<li>对象==数字   对象转为字符串，字符串转为数字，数字和数字比较</li>
<li>对象==布尔   对象转为字符串，字符串转为数字，布尔转为数字，数字和数字比较</li>
<li>字符串==数字  字符串转为数字，数字和数字比较</li>
<li>字符串==布尔  字符串转为数字，布尔转为数字，数字和数字比较</li>
<li>布尔==数字   布尔转为数字，数字和数字比较</li>
<li>null==undefined    true</li>
<li>null或undefined与其它数据类型比较都不相等</li>
<li>NaN==NaN  永远不相等</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> &#123;&#125;==&#123;&#125;  F</div><div class="line"><span class="number">2.</span> []==[]  F</div><div class="line"><span class="number">3.</span> &#123;&#125;==[]  F</div><div class="line"><span class="number">4.</span> !<span class="number">0</span>==<span class="number">0</span>   F</div><div class="line"><span class="number">5.</span> <span class="string">""</span>==[]  T</div><div class="line"><span class="number">6.</span> ![]==<span class="literal">false</span> T</div><div class="line"><span class="number">7.</span> <span class="built_in">parseFloat</span>(<span class="string">"0.36a"</span>)==<span class="string">"0.36a"</span>  F</div><div class="line"><span class="number">8.</span> <span class="built_in">parseFloat</span>(<span class="string">"0.36a"</span>)==[<span class="string">"0.36a"</span>]  F</div><div class="line"><span class="number">9.</span> !(&#123;&#125;==![])  T</div><div class="line"><span class="number">10.</span> ![]==<span class="number">0</span>   T</div><div class="line"><span class="number">11.</span> <span class="built_in">Number</span>(<span class="string">"1"</span>+<span class="number">3</span>)=<span class="literal">NaN</span>  F</div><div class="line"><span class="number">12.</span> ![]=’’  T</div><div class="line"><span class="number">13.</span> []==![]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">**解析：**</div><div class="line">1. &#123;&#125;==&#123;&#125;  对象==对象，永远不相等，所以F</div><div class="line">2. []==[]  对象==对象，永远不相等，所以F</div><div class="line">3. &#123;&#125;==[]  对象==对象，永远不相等，所以F</div><div class="line">4. !0==0  布尔==数字，!Boolean(0)==0，!False==0，布尔转数字，数字和数字比较，1==0，所以F</div><div class="line">5. &quot;&quot;==[]  字符串==对象，对象转字符串，字符串和字符串比较。[].toString()=&quot;&quot;，&quot;&quot;==&quot;&quot;，所以T</div><div class="line">6. ![]==false 布尔==布尔，直接比较，Boolean([])=False，True==False，所以F</div><div class="line">7. parseFloat(&quot;0.36a&quot;)==&quot;0.36a&quot;  数字==字符串，字符串转为数字，数字和数字比较，parseFloat(&quot;0.36a&quot;)=0.36，Number(&quot;0.36a&quot;)=NaN，0.36==NaN，所以F</div><div class="line">8. parseFloat(&quot;0.36a&quot;)==[&quot;0.36a&quot;]  数字==对象，对象转为字符串，字符串转为数字，数字和数字比较，parseFloat(&quot;0.36a&quot;)=0.36,([&quot;0.36a&quot;]).toString()=&quot;0.36a&quot;,Number(&quot;0.36a&quot;)=NaN,0.36==NaN,所以F</div><div class="line">9. !(&#123;&#125;==![])  括号内，对象==布尔，对象转字符串，字符串转数字，布尔转数字，数字与数字比较，(&#123;&#125;).toString()=&quot;object Object&quot;,Number(&quot;object Object&quot;)=NaN;![]等价于Boolean([])取反，Boolean([])=true，取反为false，所以![]为false；原题等价于&#123;&#125;==false取反；NaN==0，结果为false，取反为true。</div><div class="line">10. ![]==0 布尔==数字，布尔转数字，数字与数字比较，![]为false，false转数字为0，0==0，所以最后为T</div><div class="line">11. Number(&quot;1&quot;+3)==NaN  数字==NaN，永远不相等。 Number(&quot;1&quot;+3)=13，所以F</div><div class="line">12. ![]==&quot;&quot;  布尔==字符串，![]为false，false转数字为0，&quot;&quot;转数字为0，0==0，所以为T</div><div class="line">13.  []==![]  对象==布尔，对象转字符串，字符串转数字，布尔转数字，数字与数字比较；[]转字符串为&quot;&quot;,&quot;&quot;转数字为0，！[]计算结果为false，false转数字为0，0==0，所以为T</div></pre></td></tr></table></figure>
<h4 id="基本数据类型和引用数据类型的区别"><a href="#基本数据类型和引用数据类型的区别" class="headerlink" title="基本数据类型和引用数据类型的区别"></a>基本数据类型和引用数据类型的区别</h4><p>基本数据类型：<br>如果将一个变量的基本数据类型的值赋值给另一个变量，那么原来变量之后的操作与另一个变量没有任何关系，因为基本数据类型会直接将值传递给对方，相当于两个变量存的值一直，但是有两份。</p>
<blockquote>
<p>基本数据类型直接操作值。</p>
</blockquote>
<p>引用数据类型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1=&#123;<span class="attr">name</span>:<span class="string">'zfpx'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2=obj1;</div><div class="line">obj1.name=<span class="string">"珠峰培训"</span>；</div><div class="line"><span class="built_in">console</span>.log(obj1,boj2);</div></pre></td></tr></table></figure></p>
<ul>
<li>浏览器提供一个全局作用域供这段代码从上到下执行；</li>
<li>遇到obj1，发现其是引用数据类型，浏览器会开辟一个内存空间将obj1中的代码块当作字符串，存储在这个内存空间中，给内存空间一个十六进制的地址，将这个地址返回给obj1，此时obj1=内存地址；</li>
<li>当obj2=obj1时，obj1给obj2的其实是obj1中存储的内存地址，那么obj2也会通过这个地址去查找和obj1一样的内存空间；</li>
<li>无论修改obj1还是修改obj2，其实都是操作的一个地址，所以一个改变，另一个也会跟着改变。<blockquote>
<p>引用数据类型操作的是一个内存地址。<br>举例：D盘中放的是源文件，将这个源文件增加了几个快捷方式，一个放在桌面上，一个放在c盘中，一个放在E盘中，那么无论桌面还是C盘E盘，操作的都是D盘的原始文件，也就是说文件只有一个，只不过通道有很多。</p>
</blockquote>
</li>
</ul>
<h4 id="数据类型的检测"><a href="#数据类型的检测" class="headerlink" title="数据类型的检测"></a>数据类型的检测</h4><ul>
<li><p>typeof value运算符</p>
<ul>
<li>检测的返回值是一个字符串，引号中间包着该值的数据类型。</li>
<li>typeof运算符不能具体检测引用数据类型，返回值只是object和function</li>
<li>typeof运算符检测null的时候，返回值为“object” <ul>
<li>typeof null –&gt; “object”</li>
<li>typeof undefined –&gt; “undefined”</li>
<li>typeof  /^%/ –&gt; “object”</li>
<li>typeof(typeof Number([])) –&gt;”string”</li>
</ul>
</li>
</ul>
</li>
<li><p>instanceof 判断已知对象是否属于某一类</p>
<ul>
<li>判断一个值是否属于这个类的一个实例</li>
<li>每种数据类型都有自己所属的类，instanceof能详细检测引用数据类型，但是对于基本数据类型只有通过构造函数方式创建的才能检测</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="keyword">instanceof</span> <span class="built_in">Array</span>   --&gt;<span class="literal">true</span></div><div class="line"><span class="keyword">var</span> num=<span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Number</span>);   <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> num=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Number</span>);   <span class="comment">//true</span></div></pre></td></tr></table></figure>
<ul>
<li>constructor (构造器)<ul>
<li>根据对象的 constructor 判断<br><code>[1,2,3].constructor===Array  --&gt;true</code></li>
</ul>
</li>
<li>prototype<br><code>Object.prototype.toString.call([1,2]) --&gt;[object Array]</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;object对象&quot;&gt;&lt;a href=&quot;#object对象&quot; class=&quot;headerlink&quot; title=&quot;object对象&quot;&gt;&lt;/a&gt;object对象&lt;/h2&gt;&lt;p&gt;js中引用数据类型分为对象数据类型和函数数据类型。&lt;br&gt;对象数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组类Array&lt;/li&gt;
&lt;li&gt;对象类Object&lt;/li&gt;
&lt;li&gt;数学类Math&lt;/li&gt;
&lt;li&gt;正则类RegExp&lt;/li&gt;
&lt;li&gt;时间类Date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Object是引用数据类型中的对象类，每一个我们使用的具体对象都是这个类的一个实例。&lt;/p&gt;
&lt;p&gt;对象类中的实例都是有键值对组成的（属性名和属性值），键值对是用来描述这个对象特征的。&lt;/p&gt;
&lt;p&gt;如何在js中创建一个对象实例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字面量创建 &lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象名={属性名1：属性值1，属性名2：属性值2}&lt;/p&gt;
    
    </summary>
    
    
      <category term="js;js数据类型" scheme="http://yoursite.com/tags/js-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建GitHub博客</title>
    <link href="http://yoursite.com/2017/04/25/%E5%9F%BA%E4%BA%8EGitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/04/25/基于GitHub搭建博客/</id>
    <published>2017-04-25T06:36:16.000Z</published>
    <updated>2017-07-27T06:32:46.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><ul>
<li>Node.js 的安装和准备 </li>
<li>Git的安装和准备 </li>
<li>gitHub账户的配置</li>
</ul>
<h3 id="Node-js-的安装和准备"><a href="#Node-js-的安装和准备" class="headerlink" title="Node.js 的安装和准备"></a>Node.js 的安装和准备</h3><ul>
<li>1.下载node.js安装文件：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></li>
<li>2.cmd，打开命令行界面,查看安装版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
<h3 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h3><ul>
<li>下载Git安装文件：<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a></li>
<li>打开命令行输入,检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
<h3 id="github账户的注册和配置"><a href="#github账户的注册和配置" class="headerlink" title="github账户的注册和配置"></a>github账户的注册和配置</h3><ul>
<li>Github注册：<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a></li>
<li>创建代码库：</li>
<li>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">注意：</div><div class="line">比如我的github名称是githufei,</div><div class="line">这里你就填 githufei.github.io</div></pre></td></tr></table></figure>
<ul>
<li>代码库设置:Setting<ul>
<li>接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages</li>
<li>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul>
<li>首先在E盘目录下创建Hexo文件夹，并在命令行的窗口进入到该目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E:    进入E盘</div><div class="line">cd Hexo 进入Hexo文件夹</div></pre></td></tr></table></figure>
<ul>
<li>安装HEXO</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入</p>
<ul>
<li>保存hexo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -save</div></pre></td></tr></table></figure>
<ul>
<li>检查安装是否成功</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure>
<h2 id="hexo的相关配置"><a href="#hexo的相关配置" class="headerlink" title="hexo的相关配置"></a>hexo的相关配置</h2><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="首次体验Hexo"><a href="#首次体验Hexo" class="headerlink" title="首次体验Hexo"></a>首次体验Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   #生成</div><div class="line">hexo s   #启动服务</div></pre></td></tr></table></figure>
<p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></p>
<h2 id="怎样将Hexo与github-page-联系起来"><a href="#怎样将Hexo与github-page-联系起来" class="headerlink" title="怎样将Hexo与github page 联系起来"></a>怎样将Hexo与github page 联系起来</h2><p>大概分为以下几步</p>
<ul>
<li>配置git个人信息 </li>
<li>配置Deployment</li>
</ul>
<h3 id="配置Git个人信息"><a href="#配置Git个人信息" class="headerlink" title="配置Git个人信息"></a>配置Git个人信息</h3><ul>
<li><p>1.设置Git的user name和email：(如果是第一次的话)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;githufei&quot;</div><div class="line">git config --global user.email &quot;460284524@qq.com&quot;</div></pre></td></tr></table></figure>
<p>查看自己的Git的user name和email:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　git config user.name</div><div class="line">　git config user.email</div></pre></td></tr></table></figure>
</li>
<li><p>2.检查是否已经有SSH Key。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div><div class="line">ls</div></pre></td></tr></table></figure>
</li>
<li><p>3.生成密钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;460284524@qq.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">连续3个回车。如果不需要密码的话。</div><div class="line">最后得到了两个文件：id_rsa和id_rsa.pub。</div><div class="line">默认的存储路径是：C:\Users\Administrator\.ssh</div></pre></td></tr></table></figure>
<ul>
<li><p>4.添加密钥到ssh-agent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval &quot;$(ssh-agent -s)&quot;</div></pre></td></tr></table></figure>
<p>添加生成的 SSH key 到 ssh-agent。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
</li>
<li><p>5.登陆Github, 添加 ssh<br>把id_rsa.pub文件里的内容复制到SSH keys</p>
</li>
<li><p>6.测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>你将会看到：如果看到Hi后面是你的用户名，就说明成功了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果提示Are you sure you want to continue connecting (yes/no)?，输入yes</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置Deployment"><a href="#配置Deployment" class="headerlink" title="配置Deployment"></a>配置Deployment</h3><ul>
<li><p>配置_config.yml中有关deploy的部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repository: git@github.com:githufei/githufei.github.io.git</div><div class="line">branch: master</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h2><ul>
<li><p>1.定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &apos;my-first-blog&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>hexo会帮我们在_posts下生成相关md文件,用马克飞象打开写文章就可以</p>
</li>
<li><p>文章编辑好之后，运行生成、部署命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g #在部署前先生成</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="踩坑提醒"><a href="#踩坑提醒" class="headerlink" title="踩坑提醒"></a>踩坑提醒</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deloyer not found:git</div></pre></td></tr></table></figure>
<p> 这样的错误是需要装插件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建环境准备&quot;&gt;&lt;a href=&quot;#搭建环境准备&quot; class=&quot;headerlink&quot; title=&quot;搭建环境准备&quot;&gt;&lt;/a&gt;搭建环境准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Node.js 的安装和准备 &lt;/li&gt;
&lt;li&gt;Git的安装和准备 &lt;/li&gt;
&lt;li&gt;gitHub账户的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Node-js-的安装和准备&quot;&gt;&lt;a href=&quot;#Node-js-的安装和准备&quot; class=&quot;headerlink&quot; title=&quot;Node.js 的安装和准备&quot;&gt;&lt;/a&gt;Node.js 的安装和准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.下载node.js安装文件：&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.cmd，打开命令行界面,查看安装版本&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node -v&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm -v&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置Git环境&quot;&gt;&lt;a href=&quot;#配置Git环境&quot; class=&quot;headerlink&quot; title=&quot;配置Git环境&quot;&gt;&lt;/a&gt;配置Git环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载Git安装文件：&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;打开命令行输入,检查安装是否成功&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git --version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;github账户的注册和配置&quot;&gt;&lt;a href=&quot;#github账户的注册和配置&quot; class=&quot;headerlink&quot; title=&quot;github账户的注册和配置&quot;&gt;&lt;/a&gt;github账户的注册和配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Github注册：&lt;a href=&quot;https://github.com/&quot;&gt;https://github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;创建代码库：&lt;/li&gt;
&lt;li&gt;在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;注意：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;比如我的github名称是githufei,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;这里你就填 githufei.github.io&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;代码库设置:Setting&lt;ul&gt;
&lt;li&gt;接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages&lt;/li&gt;
&lt;li&gt;点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>js基础知识</title>
    <link href="http://yoursite.com/2017/04/02/1.js%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/04/02/1.js基础知识/</id>
    <published>2017-04-02T08:52:30.000Z</published>
    <updated>2017-08-14T08:50:50.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解JS"><a href="#了解JS" class="headerlink" title="了解JS"></a>了解JS</h1><ul>
<li>全称JavaScript</li>
<li>js是运行在浏览器（运行环境）</li>
<li>js是唯一一门可以和用户直接交互的语言</li>
<li>js是一门轻量级和解释型的脚本语言</li>
<li>js安全性低，很容易被篡改</li>
<li>js是单线程语言，从上到下执行<ul>
<li>解释型：代码边解释边运行</li>
<li>轻量级：语言不严谨</li>
</ul>
</li>
</ul>
<h1 id="JS的组成"><a href="#JS的组成" class="headerlink" title="JS的组成"></a>JS的组成</h1><ul>
<li>ECMAScript，ECMA是一个组织，规定了js的基本规范</li>
<li>DOM （Document Object Model）文档对象模型，是操作document（文档对象），文档对象是文件的顶级对象</li>
<li>BOM （Browser Object Model）浏览器对象模型，操作的是浏览器，浏览器的顶级对象是window</li>
</ul>
<h1 id="JS的引入方式"><a href="#JS的引入方式" class="headerlink" title="JS的引入方式"></a>JS的引入方式</h1><p>js是不能独立运行的，需要依靠html文档运行在浏览器中，所以需要将js引入html中。引入方式：</p>
<ul>
<li>行内式</li>
<li>内嵌式</li>
<li>外链式<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">//js代码写在这里，让浏览器把所有的静态资源（结构和样式）加载完成后执行js代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>js代码一般写在整个html文档的最后面，因为要先加载document的所有内容，然后在将js添加到每一个DOM对象上</p>
<p>如果将js代码写在外链式的元素中间，这部分代码是无效的</p>
</blockquote>
<h1 id="js的输出方式"><a href="#js的输出方式" class="headerlink" title="js的输出方式"></a>js的输出方式</h1><ul>
<li>alert  弹出</li>
<li><code>document.write(&quot;输出的内容[html元素]/[文字]&quot;)</code></li>
<li><p>浏览器控制台输出（console）</p>
<ul>
<li><code>console.log( )</code>向控制台输出一条信息</li>
<li><code>console.dir( )</code> 向控制台输出一个对象的所有内置属性<blockquote>
<p><code>console.log()</code> 输出的内容灰色的是字符串，蓝色的是数字。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>innerHTML</p>
</li>
<li><p>innerText</p>
<ul>
<li>都可以获取指定元素内容和向指定元素内添加内容</li>
<li>innerHTML可以获取一个元素内的所有内容，包括元素和文本</li>
<li><p>innerText只能获取一个元素内的文本内容</p>
</li>
<li><p><strong>获取的语法：</strong><br>元素.innerHTML/元素.innerText</p>
</li>
<li><strong>添加的语法：</strong><br>元素.innerHTML=”要添加的内容”<br>元素.innerText=”要添加的内容”</li>
</ul>
</li>
</ul>
<blockquote>
<p>innerHTML/innerText在向元素内添加内容的时候会替换掉原来的内容<br>document.write 在原有内容的基础上添加新内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);<span class="comment">/*获取div元素*/</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).innerHTML);<span class="comment">/*控制台以innerHTML的方式输出获取的div元素*/</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).innerText);<span class="comment">/*控制台以innerText的方式输出获取的div元素*/</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).innerHTML=<span class="string">"&lt;span&gt;我是span&lt;/span&gt;"</span><span class="comment">/*以innerHTML的方式向div元素中添加内容*/</span></div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>).innerText=<span class="string">"&lt;span&gt;我是span&lt;/span&gt;"</span><span class="comment">/*以innerText的方式向div元素中添加内容*/</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="JS的命名规范"><a href="#JS的命名规范" class="headerlink" title="JS的命名规范"></a>JS的命名规范</h1><ol>
<li>严格区分大小写，test和Test代表了不同的的对象。</li>
<li>不能以数字开头</li>
<li>可以使用 $  _ 字母 数字 组合名称</li>
<li>推荐使用驼峰命名法</li>
</ol>
<ul>
<li>多个有意义的单词在一起的时候，第一个单词首字母小写，其余单词首字母大写，如<code>backgroundColor</code></li>
</ul>
<ol>
<li>变量命名时，可以使用匈牙利命名法</li>
</ol>
<ul>
<li>将数据类型的首字母，写在命名的前面，如</li>
<li>对象<code>object --&gt;oDiv</code></li>
<li>数组<code>array --&gt;a</code></li>
</ul>
<ol>
<li>在命名的时候，不能使用关键字和保留字</li>
</ol>
<ul>
<li>关键字：ECMAScript中规定了一些单词具有特殊的含义，这些单词不能用作命名，例如 <code>var break…</code></li>
<li>保留字：规定的一些目前不是关键字，但未来可能是关键字的单词</li>
</ul>
<h1 id="JS中的变量"><a href="#JS中的变量" class="headerlink" title="JS中的变量"></a>JS中的变量</h1><p>变量相当于一个容器，用来储存值和代表值。</p>
<h2 id="变量的定义："><a href="#变量的定义：" class="headerlink" title="变量的定义："></a>变量的定义：</h2><p>关键字  变量名  –&gt; <code>var name;</code><br>变量只定义不赋值的时候，获取变量返回<code>undefined</code></p>
<h2 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h2><p>关键字  变量名 –&gt;<code>var name=value;</code></p>
<blockquote>
<p>JS中的数据类型</p>
<h4 id="基本数据类型（五个）"><a href="#基本数据类型（五个）" class="headerlink" title="基本数据类型（五个）"></a>基本数据类型（五个）</h4><ul>
<li>数字number</li>
<li>字符串srting</li>
<li>布尔boolean</li>
<li>null</li>
<li>undefined</li>
</ul>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul>
<li>对象object<ul>
<li>数组类Array</li>
<li>正则类RegExp</li>
<li>数学类Math</li>
<li>对象类Object</li>
<li>…</li>
</ul>
</li>
<li>函数function</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;了解JS&quot;&gt;&lt;a href=&quot;#了解JS&quot; class=&quot;headerlink&quot; title=&quot;了解JS&quot;&gt;&lt;/a&gt;了解JS&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;全称JavaScript&lt;/li&gt;
&lt;li&gt;js是运行在浏览器（运行环境）&lt;/li&gt;
&lt;li&gt;js是唯一一门可以和用户直接交互的语言&lt;/li&gt;
&lt;li&gt;js是一门轻量级和解释型的脚本语言&lt;/li&gt;
&lt;li&gt;js安全性低，很容易被篡改&lt;/li&gt;
&lt;li&gt;js是单线程语言，从上到下执行&lt;ul&gt;
&lt;li&gt;解释型：代码边解释边运行&lt;/li&gt;
&lt;li&gt;轻量级：语言不严谨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;JS的组成&quot;&gt;&lt;a href=&quot;#JS的组成&quot; class=&quot;headerlink&quot; title=&quot;JS的组成&quot;&gt;&lt;/a&gt;JS的组成&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ECMAScript，ECMA是一个组织，规定了js的基本规范&lt;/li&gt;
&lt;li&gt;DOM （Document Object Model）文档对象模型，是操作document（文档对象），文档对象是文件的顶级对象&lt;/li&gt;
&lt;li&gt;BOM （Browser Object Model）浏览器对象模型，操作的是浏览器，浏览器的顶级对象是window&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;JS的引入方式&quot;&gt;&lt;a href=&quot;#JS的引入方式&quot; class=&quot;headerlink&quot; title=&quot;JS的引入方式&quot;&gt;&lt;/a&gt;JS的引入方式&lt;/h1&gt;&lt;p&gt;js是不能独立运行的，需要依靠html文档运行在浏览器中，所以需要将js引入html中。引入方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行内式&lt;/li&gt;
&lt;li&gt;内嵌式&lt;/li&gt;
&lt;li&gt;外链式
    
    </summary>
    
    
      <category term="js;js基础" scheme="http://yoursite.com/tags/js-js%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>js中的基本数据类型</title>
    <link href="http://yoursite.com/2017/04/02/2.js%E4%B8%AD%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/04/02/2.js中的基本数据类型/</id>
    <published>2017-04-02T02:52:30.000Z</published>
    <updated>2017-08-14T08:50:54.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><h2 id="数字-number"><a href="#数字-number" class="headerlink" title="数字 number"></a>数字 number</h2><ul>
<li>哪些值是number？<ul>
<li>数字0、 整数、小数、 <strong>NaN</strong>（not a number）。</li>
</ul>
</li>
</ul>
<h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN( ):"></a>isNaN( ):</h3><ul>
<li>判断一个值是否为数字</li>
<li>返回值:<ul>
<li>符合条件为ture –&gt; 不是一个数字</li>
<li>不符合条件为false –&gt; 是一个数字</li>
</ul>
</li>
<li>isNaN( )在判断之前会将传进来的值先进行转化，将其它数据类型转为数字数据类型。例如：<code>isNaN(&#39;0&#39;) --&gt; false</code></li>
</ul>
<blockquote>
<p>在js中，除了变量名之外的所有内容基本上都是字符串，字符串在js中需要用引号扩起来。<br><a id="more"></a></p>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number( ):"></a>Number( ):</h3><ul>
<li>把对象的值转换为数字。</li>
<li>语法：Number(object)</li>
<li>转换规则：<br>1）如果是Boolean值，true和false将分别转换为1和0。<br>2）如果是数字值，只是简单的传入和返回。<br>3）如果是null值，返回0。<br>4）如果是undefined,返回NaN。<br>5）如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用的对象的toString()方法，然后再次依照前面的规则转换返回的字符串值。<br>6）如果是字符串，遵循下列规则：<ul>
<li>从第一个有效数字开始到最后一个有效数字结束，中间不能有数字以外的任何东西，否则返回NaN</li>
<li>如果是字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值，即“1”变成1，“123”会变成123，而“011”会变成11（前导的零被忽略了）；</li>
<li>如果字符串中包含有效的浮点格式，如“1.1”，则将其转换为对应的浮点数值（同样也会忽略前导零）；</li>
<li>如果字符串中包含有效的十六进制格式，例如”0xf”，则将其他转换为相同大小的十进制整数值；</li>
<li>如果字符串是空的（不包含任何字符），则将其转换为0；</li>
<li>如果字符串中包含除上述格式之外的字符，则将其他转换成NaN.</li>
<li>Number(“”)→0</li>
<li>Number(“ “)→0</li>
<li>Number(“  12”)→12</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="字符String-–-gt-number"><a href="#字符String-–-gt-number" class="headerlink" title="字符String –&gt;number"></a>字符String –&gt;number</h4><ul>
<li>调用Number( )函数</li>
<li>Number(“String”)<ul>
<li>返回值数字</li>
<li>返回值为NaN</li>
</ul>
</li>
</ul>
<h4 id="对象object-–-gt-number"><a href="#对象object-–-gt-number" class="headerlink" title="对象object –&gt;number"></a>对象object –&gt;number</h4><ul>
<li>第一步：调用toSrting( )函数，将对象转为字符串</li>
<li>第二步：再调用Number( )函数，将字符串转为数字<ul>
<li>{} —&gt;({}).toSrting()–&gt;”[object Object]”–&gt;Number(“[object Object]”)–&gt;NaN （对象类）</li>
<li>[]–&gt;(([])).toSrting()–&gt; “”–&gt;Number(“”)–&gt;0  （数组类）</li>
</ul>
</li>
</ul>
<h4 id="布尔boolean-–-gt-number，"><a href="#布尔boolean-–-gt-number，" class="headerlink" title="布尔boolean –&gt;number，"></a>布尔boolean –&gt;number，</h4><p>调用Number( )函数</p>
<ul>
<li>Number(“布尔表达式”)<ul>
<li>当表达式值为true，返回值为1</li>
<li>当表达式值为false，返回值为0</li>
</ul>
</li>
</ul>
<h4 id="null-–-gt-number，"><a href="#null-–-gt-number，" class="headerlink" title="null –&gt;number，"></a>null –&gt;number，</h4><ul>
<li>调用Number( )函数</li>
<li>Number(null)<ul>
<li>返回值为0</li>
</ul>
</li>
</ul>
<h4 id="undefined-–-gt-number"><a href="#undefined-–-gt-number" class="headerlink" title="undefined –&gt;number"></a>undefined –&gt;number</h4><ul>
<li>调用Number( )函数</li>
<li>Number(undefined)<ul>
<li>返回值为NaN</li>
</ul>
</li>
</ul>
<blockquote>
<p>Number( )这个函数的返回值：</p>
<ul>
<li>数字</li>
<li>NaN<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>(<span class="string">"100,000.00"</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"1.3.3"</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"1.3"</span>) --&gt;<span class="number">1.3</span></div><div class="line"><span class="built_in">Number</span>(<span class="string">"1"</span>+<span class="number">3</span>) --&gt;<span class="number">13</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>isNaN( )的返回值：</p>
<ul>
<li>True</li>
<li>False</li>
</ul>
</blockquote>
<h3 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat( ):"></a>parseFloat( ):</h3><p>解析一个字符串，并返回一个浮点数（小数）。</p>
<h3 id="parseInt-："><a href="#parseInt-：" class="headerlink" title="parseInt( )："></a>parseInt( )：</h3><p>解析一个字符串，并返回一个整数。</p>
<ul>
<li><p>以上两个函数，都是从指定值中去分离一部分数字，一般指定的值要么是数字要么是字符串，如果传入的值不是字符串也不是数字，则先将值转为字符串，然后在字符串中去数字。</p>
</li>
<li><p>工作机制：<br>将值从第一个字符（有效数字）向后查找，直到值中不是数字类型的字符停止查找，将有效数字部分返回，Float可以识别小数，Int只识别整数部分。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"14.2.6.8"</span>) --&gt;<span class="number">14.2</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"14.2.6.8"</span>) --&gt;<span class="number">14</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">".369"</span>) --&gt;<span class="number">0.369</span>    <span class="comment">/*0是可以省略的，计算机会自动补位0*/</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">".369"</span>) --&gt;<span class="number">0.369</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">".369"</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="number">.369</span>) --&gt;<span class="number">0</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">""</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">" "</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">parseInt</span>([<span class="number">.1</span>,<span class="number">1</span>]) --&gt;<span class="number">0</span>  <span class="comment">//数组会自动补位0</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">".1"</span>) --&gt;<span class="literal">NaN</span>   <span class="comment">//字符串不会补位0</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"123bc"</span>) --&gt;<span class="number">123</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"123v0"</span>) --&gt;<span class="number">123</span></div><div class="line"><span class="built_in">parseFloat</span>(<span class="string">"0.vg1"</span>) --&gt;<span class="number">0</span></div><div class="line">number(<span class="string">"69c"</span>) --&gt;<span class="literal">NaN</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(<span class="string">"123.o0"</span>)) --&gt;<span class="literal">false</span></div></pre></td></tr></table></figure>
<h2 id="布尔-boolean"><a href="#布尔-boolean" class="headerlink" title="布尔 boolean"></a>布尔 boolean</h2><p>只有两个值true（真）false（假）</p>
<ul>
<li>哪些值为真，哪些值为假？<br>只有5个值 0 NaN “” null undefined为false ，其余都是true</li>
<li>怎样判断一个值为真还是假？<br>Boolean(value)将其它数据类型转为布尔类型的方法<blockquote>
<p><strong>在进行布尔运算的时候，传入的值不需要进行数据类型转换，直接根据5个值进行判断。</strong></p>
</blockquote>
</li>
</ul>
<h3 id="Boolean-value"><a href="#Boolean-value" class="headerlink" title="Boolean(value)"></a>Boolean(value)</h3><p>作用：判断一个数是否为真，或者是将其它数据类型转为布尔类型。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Boolean</span>(<span class="string">""</span>); --&gt;<span class="literal">true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="string">"parseInt(&#123;&#125;)"</span>)--&gt;<span class="literal">true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="built_in">Number</span>(<span class="string">''</span>))--&gt;<span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>逻辑运算：<br>!value 先将value转为布尔，然后取反<br>!!value先将value转为布尔，然后取反，再取反<br>!!value与Boolean(value)的作用相同，都是将其它数据类型转化为布尔类型。</p>
<h2 id="字符串string"><a href="#字符串string" class="headerlink" title="字符串string"></a>字符串string</h2><p>字符串：在js中字符串是一个变量，用来储存文本，用引号包裹，字符串在js中不具有任何的意义，也没有任何的功能。<br>引号可以使用双引号，也可以使用单引号，但是双引号和单引号必须交替使用。可以使用单引号包裹双引号。<br>如果字符串中需要输出引号，可以使用前面加\转义，如 要输出”I‘m a teacher”这个字符串，可以输出 <code>I\‘m a teacher</code>.</p>
<h3 id="xxx-toString"><a href="#xxx-toString" class="headerlink" title="(xxx).toString():"></a>(xxx).toString():</h3><p>将其它数据类型转化为字符串。<br>除了null和undefined没有toString方法，其它都有。<br>    ([]).toString()–&gt;””<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;&#125; --&gt;<span class="string">"[object Object]"</span></div><div class="line">[] --&gt; <span class="string">""</span></div><div class="line"><span class="number">0</span> --&gt; <span class="string">"0"</span></div><div class="line"><span class="literal">null</span> --&gt;<span class="string">"null"</span></div><div class="line"><span class="literal">undefined</span> --&gt;<span class="string">"undefined"</span></div></pre></td></tr></table></figure></p>
<h3 id="拼接字符串："><a href="#拼接字符串：" class="headerlink" title="拼接字符串："></a>拼接字符串：</h3><p>将两个或两个以上的独立的字符串用+连接在一起。<br>其它数据类型如果遇到字符串拼接，会默认先转换为字符串数据类型，然后再拼接。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> num2=<span class="string">"2"</span>;</div><div class="line"><span class="built_in">console</span>.log(num1+num2);</div><div class="line"></div><div class="line">输出结果为<span class="string">"12"</span></div></pre></td></tr></table></figure>
<h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p>两个都表示“无”<br>null表示没有对象，即此处不应该有值（现在预留，之后可以添加）<br>null也可以进行保留对象兵将值清空。</p>
<p>undefined表示“缺少值”，就是此处应该有一个值，但是还没有定义。</p>
<p>Number(null)–&gt;0<br>Number(undefined)–&gt;NaN</p>
<blockquote>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>number</p>
<ul>
<li>Number(value)</li>
<li>parseFloat(value)</li>
<li>parseInt(value)</li>
<li>isNaN(value)</li>
</ul>
<p>boolean</p>
<ul>
<li>Boolean()</li>
<li>!</li>
<li>!!</li>
<li>五个值为假（）</li>
</ul>
<p>srting</p>
<ul>
<li>value.toString()</li>
<li>字符串拼接</li>
</ul>
<p>null / undefined</p>
<ul>
<li>null现在没有值，以后会有，此时null代表空</li>
<li>undefined此处本应由值，但是没有定义这个值</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本数据类型&quot;&gt;&lt;a href=&quot;#基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;基本数据类型&quot;&gt;&lt;/a&gt;基本数据类型&lt;/h1&gt;&lt;h2 id=&quot;数字-number&quot;&gt;&lt;a href=&quot;#数字-number&quot; class=&quot;headerlink&quot; title=&quot;数字 number&quot;&gt;&lt;/a&gt;数字 number&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;哪些值是number？&lt;ul&gt;
&lt;li&gt;数字0、 整数、小数、 &lt;strong&gt;NaN&lt;/strong&gt;（not a number）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;isNaN&quot;&gt;&lt;a href=&quot;#isNaN&quot; class=&quot;headerlink&quot; title=&quot;isNaN( ):&quot;&gt;&lt;/a&gt;isNaN( ):&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;判断一个值是否为数字&lt;/li&gt;
&lt;li&gt;返回值:&lt;ul&gt;
&lt;li&gt;符合条件为ture –&amp;gt; 不是一个数字&lt;/li&gt;
&lt;li&gt;不符合条件为false –&amp;gt; 是一个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;isNaN( )在判断之前会将传进来的值先进行转化，将其它数据类型转为数字数据类型。例如：&lt;code&gt;isNaN(&amp;#39;0&amp;#39;) --&amp;gt; false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在js中，除了变量名之外的所有内容基本上都是字符串，字符串在js中需要用引号扩起来。&lt;br&gt;
    
    </summary>
    
    
      <category term="js;js数据类型" scheme="http://yoursite.com/tags/js-js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2017/03/26/git/"/>
    <id>http://yoursite.com/2017/03/26/git/</id>
    <published>2017-03-26T02:36:16.000Z</published>
    <updated>2017-08-14T08:50:32.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集中式和分布式版本控制系统"><a href="#集中式和分布式版本控制系统" class="headerlink" title="集中式和分布式版本控制系统"></a>集中式和分布式版本控制系统</h2><ul>
<li>集中式版本控制系统的版本库是集中存放在中央服务器的，每次操作都要从中央服务器获取最新的版本，改动后将最新的版本推送到中央服务器。这种系统需要联网才能操作。集中式版本控制系统的代表有CVS,SVN等。</li>
<li>分布式版本控制系统的不需要中央服务器，每个客户端都有一个完整的版本库。但在实际中，为了数据交换的方便，分布式版本控制系统通常也有一台充当“中央服务器”的电脑。和集中式不同的时，这台电脑的作用主要是为了交换数据，而不是存放版本。分布式版本控制系统代表Git。</li>
</ul>
<h2 id="git准备阶段"><a href="#git准备阶段" class="headerlink" title="git准备阶段"></a>git准备阶段</h2><h3 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h3><ul>
<li>下载地址<a href="https://git-scm.com/downloads。" target="_blank" rel="external">https://git-scm.com/downloads。</a></li>
<li>git安装时选择在window下使用git并且在window下使用linux命令<br>安装完成后查看git版本号确定是否安装成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="查看git配置信息"><a href="#查看git配置信息" class="headerlink" title="查看git配置信息"></a>查看git配置信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --list</div></pre></td></tr></table></figure>
<h4 id="配置账户名和邮箱"><a href="#配置账户名和邮箱" class="headerlink" title="配置账户名和邮箱"></a>配置账户名和邮箱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name github账户名</div><div class="line">git config --global user.email github邮箱</div></pre></td></tr></table></figure>
<p>可以合并一起写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global githufei 460284524@qq.com</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>进入文件夹，”shift+右键“打开cmd命令窗口或者Git bash。也可以通过cd（change Directory的缩写）命令切换当前路径。</p>
<h3 id="创建目录和文件"><a href="#创建目录和文件" class="headerlink" title="创建目录和文件"></a>创建目录和文件</h3><ul>
<li><p>创建一个文件夹，如mygit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir mygit</div></pre></td></tr></table></figure>
</li>
<li><p>进入创建的这个文件夹mygit</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd mygit</div></pre></td></tr></table></figure>
</li>
<li><p>touch创建文件，可以创建以.开头的文件，如touch test.txt</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch 文件名</div><div class="line">touch test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>编辑文件内容：</p>
<ul>
<li><p>vim模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. `vi 文件名`，进入vim编辑模式`vi test.txt`</div><div class="line">2. i键或insert键 插入内容</div><div class="line">3.  esc键 + `:wq` 保存退出</div></pre></td></tr></table></figure>
</li>
<li><p>echo命令：把hello保存到test.txt中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo hello &gt; test.txt</div><div class="line">“&gt;” 表示清空并写入内容</div><div class="line">“&gt;&gt;”表示在原来文件的末尾追加内容</div></pre></td></tr></table></figure>
</li>
<li><p>用记事本手动编辑保存</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>vim模式输入内容：<br>把光标定位在第一行的第一个字符，<br>按i进入插入模式<br>输入想写的内容<br>输入完成后按esc退出编辑模式<br>输入:wq退出编辑模式<br>如果不想输入内容直接按:q!退出编辑器</p>
</blockquote>
<ul>
<li><p>cat命令查看文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat 文件名</div><div class="line">cat test.txt</div></pre></td></tr></table></figure>
</li>
<li><p>删除文件夹或文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf 文件/文件夹名</div><div class="line">rm -rf mygit</div></pre></td></tr></table></figure>
</li>
<li><p>ls命令列出当前目录下所有的文件，不包括隐藏文件</p>
</li>
<li><p>ls -al命令窗口当前目录下所有文件，包括隐藏文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls</div><div class="line">ls -al</div><div class="line">ls -a</div></pre></td></tr></table></figure>
</li>
<li><p>git bash清除屏幕</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear</div></pre></td></tr></table></figure>
</li>
<li><p>导出命令历史到文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">history &gt; 1.txt</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><ul>
<li>初始化git，把这个目录变成Git可以管理的仓库</li>
<li><p>初始化后git bash窗口文件夹名后出现master，在mygit文件夹中会出现隐藏文件夹.git，这个目录是Git跟踪管理版本库用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>如果不想再让文件夹被git管理，使用命令删除.git文件夹即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf .git</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p>本地仓库是由git维护的三棵“树型(有层级关系)区域”组成。</p>
<ul>
<li><strong>工作区</strong>：<br>对应你的物理目录，树型结构，也就是编辑代码的地方；</li>
<li><strong>暂存区</strong>：<br>工作区和历史提交的中间缓存，代表需要提交的工作状态，维护虚拟树型结构,临时保存你的改动；</li>
<li><strong>历史区（版本库）</strong>：<br>树型结构，历史仓库，指向你最近一次提交后的结果。<br>大部分时候是先提交到暂存区中，再提交到历史里面。也可以从历史记录里面检出数据到暂存区和工作区。<br><img src="https://ooo.0o0.ooo/2017/07/01/5957b3daf3b73.jpg" alt=""></li>
</ul>
<h2 id="Git管理版本"><a href="#Git管理版本" class="headerlink" title="Git管理版本"></a>Git管理版本</h2><h3 id="查看git状态"><a href="#查看git状态" class="headerlink" title="查看git状态"></a>查看git状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<p>文件修改后通过git status查看当前状态</p>
<h3 id="从工作区添加文件到暂存区"><a href="#从工作区添加文件到暂存区" class="headerlink" title="从工作区添加文件到暂存区"></a>从工作区添加文件到暂存区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add 文件名 </div><div class="line">git add 首字母+tab  快捷输入文件名</div><div class="line">git add . 把所有的文件加入git暂存区</div><div class="line">git add -A 把所有的文件加入git暂存区</div></pre></td></tr></table></figure>
<blockquote>
<p>工作区的文件在git bash是红色的，暂存区的文件是绿色的。</p>
</blockquote>
<h3 id="从暂存区提交文件到历史区"><a href="#从暂存区提交文件到历史区" class="headerlink" title="从暂存区提交文件到历史区"></a>从暂存区提交文件到历史区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &apos;注释内容&apos;</div></pre></td></tr></table></figure>
<ul>
<li>添加和提交可以合并使用一个命令，但第一次提交不能使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a -m &apos;信息&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>产生冲突需要手动决绝冲突，删掉不需要的内容，提交最终的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rebase cherry-pick</div></pre></td></tr></table></figure></p>
<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
<h2 id="不同区文件比较"><a href="#不同区文件比较" class="headerlink" title="不同区文件比较"></a>不同区文件比较</h2><h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<h4 id="暂存区和历史区"><a href="#暂存区和历史区" class="headerlink" title="暂存区和历史区"></a>暂存区和历史区</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --cached</div></pre></td></tr></table></figure>
<h4 id="工作区和版本库"><a href="#工作区和版本库" class="headerlink" title="工作区和版本库"></a>工作区和版本库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff master</div></pre></td></tr></table></figure>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><h3 id="从暂存区撤销回git-add的内容"><a href="#从暂存区撤销回git-add的内容" class="headerlink" title="从暂存区撤销回git add的内容"></a>从暂存区撤销回git add的内容</h3><ul>
<li>如误操作将工作区中不准确的内容推送到了暂存区，可以移除本次向暂存区的推送，让暂存区回到同步前的正确状态。</li>
<li><p>移除某一个文件的同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD 文件名</div></pre></td></tr></table></figure>
</li>
<li><p>通过版本id恢复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset hard commit_id</div></pre></td></tr></table></figure>
</li>
<li><p>撤回所有文件的同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD .</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><h3 id="从历史区恢复文件到工作区"><a href="#从历史区恢复文件到工作区" class="headerlink" title="从历史区恢复文件到工作区"></a>从历史区恢复文件到工作区</h3><ul>
<li>如工作区出错，或工作区文件丢失，可以从历史区恢复上次提交的正确内容或找回文件</li>
<li><p>先从缓存区恢复，如果缓存区无内容，可以从历史区域恢复</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout &quot;文件名&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>恢复某个版本文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout commit_id filename 某个文件</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><ul>
<li><p>将工作区，暂存区，历史区用同一个版本全部覆盖掉</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard 版本号</div></pre></td></tr></table></figure>
</li>
<li><p>查看回滚前的版本号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch dev</div></pre></td></tr></table></figure>
<h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout dev</div></pre></td></tr></table></figure>
<h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev</div></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge dev</div></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d dev</div></pre></td></tr></table></figure>
<h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><ul>
<li>初始化，一个目录只做一次</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<ul>
<li>新建一个.gitignore文件，里面写上忽略的内容，如webstorm生成的.idea文件夹，安装node模块生成的node_modules文件夹，每次同步不会同步忽略的文件和目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .gitignore</div></pre></td></tr></table></figure>
<ul>
<li>创建需要提交的文件（空文件夹不会被提交.gitkeep）</li>
<li><p>添加到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>添加到历史区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m&apos;xxx&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="链接远程仓库"><a href="#链接远程仓库" class="headerlink" title="链接远程仓库"></a>链接远程仓库</h3><p>打开Github，新建一个仓库(repository)，在quick setup下有个网站，如<code>https://github.com/githufei/mygit.git</code>。别名代表了这个仓库，地址也代表了这个仓库。关联后同步的内容就会添加到这个仓库中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add 别名(origin) 地址</div><div class="line">git remote -v 查看关联的仓库</div><div class="line">git remote rm 别名     可以删除链接</div></pre></td></tr></table></figure>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h3 id="发布github静态页"><a href="#发布github静态页" class="headerlink" title="发布github静态页"></a>发布github静态页</h3><ul>
<li>必须要有一个固定的分支 (gh-pages)</li>
<li>需要将内容发送到这个分支上</li>
<li>在setting中可以免费送你一个网址<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b gh-pages</div><div class="line">touch index.html</div><div class="line">git add .</div><div class="line">git commit -m&apos;addHtml&apos;</div><div class="line">git push origin gh-pages</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><p>克隆一次，克隆下来默认会赠送一个地址，可以在这个地址上使用git pull 不停的更新数据到本地。在更新数据时如果遇到冲突不能拉取，先提交到历史区，然后删除冲突文件，再次拉取即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone 别人的地址 别名(文件夹名)</div><div class="line">git pull origin master</div></pre></td></tr></table></figure></p>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><ul>
<li>可以把别人的项目拷贝一份变成自己的（原作者更新代码，这边fork下来的不受影响）</li>
</ul>
<h3 id="pull-request"><a href="#pull-request" class="headerlink" title="pull request"></a>pull request</h3><ul>
<li>可以向项目的原作者发送合并请求（必须是fork过来的才可以发送合并请求）</li>
<li>原作者同意合并请求后将把请求者的代码合并到原作者的内容中</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集中式和分布式版本控制系统&quot;&gt;&lt;a href=&quot;#集中式和分布式版本控制系统&quot; class=&quot;headerlink&quot; title=&quot;集中式和分布式版本控制系统&quot;&gt;&lt;/a&gt;集中式和分布式版本控制系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;集中式版本控制系统的版本库是集中存放在中央服务器的，每次操作都要从中央服务器获取最新的版本，改动后将最新的版本推送到中央服务器。这种系统需要联网才能操作。集中式版本控制系统的代表有CVS,SVN等。&lt;/li&gt;
&lt;li&gt;分布式版本控制系统的不需要中央服务器，每个客户端都有一个完整的版本库。但在实际中，为了数据交换的方便，分布式版本控制系统通常也有一台充当“中央服务器”的电脑。和集中式不同的时，这台电脑的作用主要是为了交换数据，而不是存放版本。分布式版本控制系统代表Git。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git准备阶段&quot;&gt;&lt;a href=&quot;#git准备阶段&quot; class=&quot;headerlink&quot; title=&quot;git准备阶段&quot;&gt;&lt;/a&gt;git准备阶段&lt;/h2&gt;&lt;h3 id=&quot;下载与安装&quot;&gt;&lt;a href=&quot;#下载与安装&quot; class=&quot;headerlink&quot; title=&quot;下载与安装&quot;&gt;&lt;/a&gt;下载与安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载地址&lt;a href=&quot;https://git-scm.com/downloads。&quot;&gt;https://git-scm.com/downloads。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git安装时选择在window下使用git并且在window下使用linux命令&lt;br&gt;安装完成后查看git版本号确定是否安装成功&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git --version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h3&gt;&lt;h4 id=&quot;查看git配置信息&quot;&gt;&lt;a href=&quot;#查看git配置信息&quot; class=&quot;headerlink&quot; title=&quot;查看git配置信息&quot;&gt;&lt;/a&gt;查看git配置信息&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --list&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置账户名和邮箱&quot;&gt;&lt;a href=&quot;#配置账户名和邮箱&quot; class=&quot;headerlink&quot; title=&quot;配置账户名和邮箱&quot;&gt;&lt;/a&gt;配置账户名和邮箱&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.name github账户名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global user.email github邮箱&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以合并一起写&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --global githufei 460284524@qq.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
</feed>
